/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * EnhancedPosition = This interface offers functionalities to retrieve the
 *  enhanced position of the vehicle
 */
#ifndef ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Enhanced_Position_PROXY_H_
#define ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Enhanced_Position_PROXY_H_

#include "EnhancedPositionProxyBase.h"


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace EnhancedPositionService {

template <typename ... _AttributeExtensions>
class EnhancedPositionProxy: virtual public EnhancedPosition, virtual public EnhancedPositionProxyBase
, public _AttributeExtensions... {
public:
    EnhancedPositionProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~EnhancedPositionProxy();

    typedef EnhancedPosition InterfaceType;



    /**
     * PositionUpdate = This signal is called to notify a client application of a
     *  position change. The update frequency is implementation specific. The maximal
     *  allowed frequency is 10Hz
     */
    /**
     * Returns the wrapper class that provides access to the broadcast PositionUpdate.
     */
    virtual PositionUpdateEvent& getPositionUpdateEvent() {
        return delegate_->getPositionUpdateEvent();
    }

    /**
     * GetVersion = This method returns the API version implemented by the server
     *  application
     * 
     * Calls GetVersion with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetVersion(CommonAPI::CallStatus& callStatus, EnhancedPositionServiceTypes::Version& version);
    /**
     * Calls GetVersion with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetVersionAsync(GetVersionAsyncCallback callback);
    /**
     * GetPositionInfo = This method returns a given set of positioning data (e.g.
     *  Position, Course, Accuracy, Status, ... )
               Note: If a requested
     *  value is invalid, it's not returned to the client application
     * 
     * Calls GetPositionInfo with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetPositionInfo(const EnhancedPositionServiceTypes::Bitmask& valuesToReturn, CommonAPI::CallStatus& callStatus, EnhancedPositionServiceTypes::Timestamp& timestamp, EnhancedPositionServiceTypes::PositionInfo& data);
    /**
     * Calls GetPositionInfo with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetPositionInfoAsync(const EnhancedPositionServiceTypes::Bitmask& valuesToReturn, GetPositionInfoAsyncCallback callback);
    /**
     * GetSatelliteInfo = This method returns information about the current satellite
     *  constellation
            Note: If a requested value is invalid, it's not
     *  returned to the client application
     * 
     * Calls GetSatelliteInfo with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetSatelliteInfo(CommonAPI::CallStatus& callStatus, EnhancedPositionServiceTypes::Timestamp& timestamp, EnhancedPositionServiceTypes::SatelliteInfo& satelliteInfo);
    /**
     * Calls GetSatelliteInfo with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetSatelliteInfoAsync(GetSatelliteInfoAsyncCallback callback);
    /**
     * GetTime = This method returns UTC time and date.
                Note: If a
     *  requested value is invalid, it's not returned to the client application
     * 
     * Calls GetTime with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetTime(CommonAPI::CallStatus& callStatus, EnhancedPositionServiceTypes::Timestamp& timestamp, EnhancedPositionServiceTypes::TimeInfo& time);
    /**
     * Calls GetTime with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetTimeAsync(GetTimeAsyncCallback callback);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual std::string getAddress() const;

    /**
     * Returns the domain of the remote partner this proxy communicates with.
     */
    virtual const std::string& getDomain() const;

    /** 
     * Returns the service ID of the remote partner this proxy communicates with.
     */
    virtual const std::string& getServiceId() const;

    /**
     * Returns the instance ID of the remote partner this proxy communicates with.
     */
    virtual const std::string& getInstanceId() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<EnhancedPositionProxyBase> delegate_;
};

#ifdef WIN32
    typedef EnhancedPositionProxy<CommonAPI::WINDummyAttributeExtension<CommonAPI::WINDummyAttribute>> EnhancedPositionProxyDefault;
#else
    typedef EnhancedPositionProxy<> EnhancedPositionProxyDefault;
#endif


//
// EnhancedPositionProxy Implementation
//
template <typename ... _AttributeExtensions>
EnhancedPositionProxy<_AttributeExtensions...>::EnhancedPositionProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<EnhancedPositionProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<EnhancedPositionProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
EnhancedPositionProxy<_AttributeExtensions...>::~EnhancedPositionProxy() {
}

/**
 * GetVersion = This method returns the API version implemented by the server
 *  application
 */
template <typename ... _AttributeExtensions>
void EnhancedPositionProxy<_AttributeExtensions...>::GetVersion(CommonAPI::CallStatus& callStatus, EnhancedPositionServiceTypes::Version& version) {
    delegate_->GetVersion(callStatus, version);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnhancedPositionProxy<_AttributeExtensions...>::GetVersionAsync(GetVersionAsyncCallback callback) {
    return delegate_->GetVersionAsync(callback);
}
/**
 * GetPositionInfo = This method returns a given set of positioning data (e.g.
 *  Position, Course, Accuracy, Status, ... )
           Note: If a requested
 *  value is invalid, it's not returned to the client application
 */
template <typename ... _AttributeExtensions>
void EnhancedPositionProxy<_AttributeExtensions...>::GetPositionInfo(const EnhancedPositionServiceTypes::Bitmask& valuesToReturn, CommonAPI::CallStatus& callStatus, EnhancedPositionServiceTypes::Timestamp& timestamp, EnhancedPositionServiceTypes::PositionInfo& data) {
    delegate_->GetPositionInfo(valuesToReturn, callStatus, timestamp, data);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnhancedPositionProxy<_AttributeExtensions...>::GetPositionInfoAsync(const EnhancedPositionServiceTypes::Bitmask& valuesToReturn, GetPositionInfoAsyncCallback callback) {
    return delegate_->GetPositionInfoAsync(valuesToReturn, callback);
}
/**
 * GetSatelliteInfo = This method returns information about the current satellite
 *  constellation
        Note: If a requested value is invalid, it's not
 *  returned to the client application
 */
template <typename ... _AttributeExtensions>
void EnhancedPositionProxy<_AttributeExtensions...>::GetSatelliteInfo(CommonAPI::CallStatus& callStatus, EnhancedPositionServiceTypes::Timestamp& timestamp, EnhancedPositionServiceTypes::SatelliteInfo& satelliteInfo) {
    delegate_->GetSatelliteInfo(callStatus, timestamp, satelliteInfo);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnhancedPositionProxy<_AttributeExtensions...>::GetSatelliteInfoAsync(GetSatelliteInfoAsyncCallback callback) {
    return delegate_->GetSatelliteInfoAsync(callback);
}
/**
 * GetTime = This method returns UTC time and date.
            Note: If a
 *  requested value is invalid, it's not returned to the client application
 */
template <typename ... _AttributeExtensions>
void EnhancedPositionProxy<_AttributeExtensions...>::GetTime(CommonAPI::CallStatus& callStatus, EnhancedPositionServiceTypes::Timestamp& timestamp, EnhancedPositionServiceTypes::TimeInfo& time) {
    delegate_->GetTime(callStatus, timestamp, time);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnhancedPositionProxy<_AttributeExtensions...>::GetTimeAsync(GetTimeAsyncCallback callback) {
    return delegate_->GetTimeAsync(callback);
}

template <typename ... _AttributeExtensions>
std::string EnhancedPositionProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
const std::string& EnhancedPositionProxy<_AttributeExtensions...>::getDomain() const {
    return delegate_->getDomain();
}

template <typename ... _AttributeExtensions>
const std::string& EnhancedPositionProxy<_AttributeExtensions...>::getServiceId() const {
    return delegate_->getServiceId();
}

template <typename ... _AttributeExtensions>
const std::string& EnhancedPositionProxy<_AttributeExtensions...>::getInstanceId() const {
    return delegate_->getInstanceId();
}

template <typename ... _AttributeExtensions>
bool EnhancedPositionProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool EnhancedPositionProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& EnhancedPositionProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& EnhancedPositionProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace EnhancedPositionService
} // namespace genivi
} // namespace org


#endif // ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Enhanced_Position_PROXY_H_
