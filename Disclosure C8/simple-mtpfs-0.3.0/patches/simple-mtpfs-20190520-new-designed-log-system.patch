*******************************************************************************
Date         : 2019-05-20
Author       : Yi Wang
Harman International Industries, Incorporated

Description  : This patch is for new designed log system for debug in future
ChangeList   : 5388805
*******************************************************************************

diff --git a/src/simple-mtpfs-db.cpp b/src/simple-mtpfs-db.cpp
index cae3781..c233faa 100755
--- a/src/simple-mtpfs-db.cpp
+++ b/src/simple-mtpfs-db.cpp
@@ -5,7 +5,7 @@ using namespace std;
 
 static int sqliteBusyHandler(void *p, int retryTimes)
 {
-    //printf("retryTimes: %d\n", retryTimes);
+    LogDebug("retryTimes: %d", retryTimes);
     sqlite3_sleep(50);
     return 1;
 }
@@ -39,7 +39,7 @@ int queryDeviceCb(void* userData, int argc, char** argv, char** col)
 
    for(i = 0; i < argc; i++)
    {
-      //printf("%s = %s\n", col[i], argv[i] ? argv[i] : "NULL");
+      LogDump("%s = %s", col[i], argv[i] ? argv[i] : "NULL");
       if(argv[i])
       {
          *fileId = atoi(argv[i]);
@@ -55,16 +55,15 @@ int32_t SIMPLE_DB::doCommit(const string &sqlStr, DBQueryCallback cb, void *user
    
    if(!mPsqlite3)
    {
-      logmsg(" doCommit, mPsqlite3 is NULL\n");
+      LogError(" mPsqlite3 is NULL");
       return -1;
    }
 
-   //printf("doCommit, sqlStr: %s\n", sqlStr.c_str());
+   LogDebug("exe sqlStr: %s\n", sqlStr.c_str());
 
    ret = sqlite3_exec(mPsqlite3, sqlStr.c_str(), cb, userData, NULL);
 
-   //printf(" doCommit, ret: %d\n", ret);
-
+   LogDebug("exe ret: %d\n", ret);
    return ret;
 }
 
@@ -78,10 +77,10 @@ SIMPLE_DB::SIMPLE_DB(const string DBName)
    if(dbPath != NULL)
    {
       databaseName = dbPath;
-      logmsg("SIMPLE_DB, env SMTPFS_DBPATH: ", dbPath, "\n");
+      LogInfo("env SMTPFS_DBPATH:%s", dbPath);
    }
    
-   //logmsg("SIMPLE_DB, real dbbase path: ", databaseName, "\n");
+   LogInfo("real dbbase path: %s", databaseName.c_str());
 
    if(!databaseName.empty())
    {
@@ -105,7 +104,7 @@ int32_t SIMPLE_DB::queryDevice(string &uuid)
 
    if(!mPsqlite3)
    {
-      logmsg(" queryDevice, mPsqlite3 is NULL\n");
+      LogError("mPsqlite3 is NULL");
       return -1;
    }
 
@@ -114,8 +113,7 @@ int32_t SIMPLE_DB::queryDevice(string &uuid)
    ret = doCommit(zSQL, queryDeviceCb, &exist, 0);
    if(ret)
    {
-      logmsg(" queryDevice, doCommit failed \n");
-      logmsg(" queryDevice, zSQL: ", zSQL, " \n");
+      LogError("doCommit failed zSQL: %s", zSQL);
    }
    
    if(zSQL)
@@ -138,7 +136,7 @@ int queryDeviceCountCb(void* userData, int argc, char** argv, char** col)
 
    for(i = 0; i < argc; i++)
    {
-      //printf("%s = %s\n", col[i], argv[i] ? argv[i] : "NULL");
+      LogDump("%s = %s", col[i], argv[i] ? argv[i] : "NULL");
       *count = atoi(argv[i]);
    }
 
@@ -151,24 +149,23 @@ int32_t SIMPLE_DB::getDeviceCount(int32_t *count)
 
    if(!mPsqlite3)
    {
-      logmsg(" getDeviceCount, mPsqlite3 is NULL\n");
+      LogError("mPsqlite3 is NULL");
       return -1;
    }
 
    if(!count)
    {
-      logmsg(" getDeviceCount, count is NULL\n");
+      LogError("cout is NULL");
       return -1;
    }
 
    sqlFmt = "select count(*) from mtpdevices;";
 
-   //printf(" getDeviceCount, sqlStr: %s\n", sqlFmt.c_str());
+   LogInfo("sql:", sqlFmt.c_str());
 
    if(doCommit(sqlFmt, queryDeviceCountCb, count, 0))
    {
-      logmsg(" getDeviceCount, doCommit failed \n");
-      logmsg(" getDeviceCount, sqlStr: ", sqlFmt, "\n");
+      LogError("doCommit failed: %s", sqlFmt.c_str());
       return -1;
    }
    
@@ -183,7 +180,7 @@ int queryOldestDeviceCb(void* userData, int argc, char** argv, char** col)
 
    for(i = 0; i < argc; i++)
    {
-      //printf("%s = %s\n", col[i], argv[i] ? argv[i] : "NULL");
+      LogDump("%s = %s", col[i], argv[i] ? argv[i] : "NULL");
 
       if(argv[i])
       {
@@ -200,24 +197,23 @@ int32_t SIMPLE_DB::getOldestDevice(const char *uuid)
 
    if(!mPsqlite3)
    {
-      logmsg(" getOldestDevice, mPsqlite3 is NULL\n");
+      LogError("mPsqlite3 is NULL");
       return -1;
    }
 
    if(!uuid)
    {
-      logmsg(" getOldestDevice, uuid is NULL\n");
+      LogError("uuid is NULL");
       return -1;
    }
 
    sqlFmt = "SELECT UUID FROM MTPDEVICES ORDER BY MTIME ASC LIMIT 0,1;";
 
-   //printf(" getOldestDevice, sqlStr: %s\n", sqlFmt.c_str());
+   LogInfo("sqlFmt:%s", sqlFmt.c_str());
 
    if(doCommit(sqlFmt, queryOldestDeviceCb, (void *)uuid, 0))
    {
-      logmsg(" getOldestDevice, doCommit failed \n");
-      logmsg(" getOldestDevice, sqlStr: ", sqlFmt, " \n");
+      LogError("doCommit failed sqlstr: %s", sqlFmt.c_str());
       return -1;
    }
 
@@ -229,7 +225,8 @@ int32_t SIMPLE_DB::checkDeviceCount()
    //firset check device count, delete more MAX_MTPDEVICE_COUNT device
    int32_t devCount = 0;
    getDeviceCount(&devCount);
-   //printf("writeDevice, devCount: %d\n", devCount);
+
+   LogInfo("devCount:%d", devCount);
    
    if(devCount >= MAX_MTPDEVICE_COUNT)
    {
@@ -237,7 +234,7 @@ int32_t SIMPLE_DB::checkDeviceCount()
       char myUUID[256] = {""};
       getOldestDevice(myUUID);
 
-      logmsg("writeDevice, myUUID: ", myUUID, "\n");
+      LogInfo("myUUID:%s", myUUID);
 
       //delete the device
       string tmpUUID = myUUID;
@@ -272,8 +269,7 @@ int32_t SIMPLE_DB::writeDevice(string &uuid)
    ret = doCommit(zSQL, NULL, NULL, 0);
    if(ret)
    {
-      logmsg(" writeDevice, doCommit failed \n");
-      logmsg(" writeDevice, zSQL: ", zSQL, "\n");
+      LogError("doCommit failed: %s", zSQL);
    }
    
    if(zSQL)
@@ -291,7 +287,7 @@ int32_t SIMPLE_DB::deleteDevice(string &uuid)
 
    if(!mPsqlite3)
    {
-      logmsg(" deleteDevice, mPsqlite3 is NULL\n");
+      LogError("mPsqlite3 is NULL");
       return -1;
    }
    
@@ -300,8 +296,7 @@ int32_t SIMPLE_DB::deleteDevice(string &uuid)
    ret = doCommit(zSQL, NULL, NULL, 0);
    if(ret)
    {
-      logmsg(" deleteDevice, doCommit failed \n");
-      logmsg(" deleteDevice, zSQL: ", zSQL, "\n");
+      LogError("doCommit failed: %s", zSQL);
    }
    
    if(zSQL)
@@ -320,24 +315,24 @@ int32_t SIMPLE_DB::queryFileID(string &path, string &uuid, uint32_t *mtpFileId)
 
    if(!mPsqlite3)
    {
-      logmsg(" queryFileID, mPsqlite3 is NULL\n");
+      LogError("mPsqlite3 is NULL");
       return -1;
    }
 
    if(!mtpFileId)
    {
-      logmsg(" queryFileID, mtpFileId is NULL\n");
+      LogError("mtpFileId is NULL");
       return -1;
    }
 
    zSQL = sqlite3_mprintf("select mtpId from mtpfile where path = '%q' and uuid = '%q'", path.c_str(), uuid.c_str());
-   //printf(" queryFileID, zSQL: %s\n", zSQL);
+
+   //LogInfo("zSQL:%s", zSQL);
 
    ret = doCommit(zSQL, queryDeviceCb, mtpFileId, 0);
    if(ret)
    {
-      logmsg(" queryFileID, doCommit failed \n");
-      logmsg(" queryFileID, zSQL: ", zSQL, "\n");
+      LogError("doCommit failed zSQL: %s", zSQL);
    }   
    
    if(zSQL)
@@ -356,7 +351,7 @@ int32_t SIMPLE_DB::writeFileID(string &path, uint32_t fileId, string &uuid)
 
    ret = queryFileID(path, uuid, &queryFileId);
 
-   //printf(" writeFileID, queryFileId: %d\n", queryFileId);
+   //LogInfo(" writeFileID, queryFileId: %d", queryFileId);
    
    if(!queryFileId)
    {
@@ -371,8 +366,7 @@ int32_t SIMPLE_DB::writeFileID(string &path, uint32_t fileId, string &uuid)
    ret = doCommit(zSQL, NULL, NULL, 0);
    if(ret)
    {
-      logmsg(" writeFileID, doCommit failed \n");
-      logmsg(" writeFileID, zSQL: ", zSQL, "\n");
+      LogError("doCommit failed zSQL: %s", zSQL);
    }
    
    if(zSQL)
@@ -390,7 +384,7 @@ int32_t SIMPLE_DB::deleteFileID(string &uuid)
 
    if(!mPsqlite3)
    {
-      logmsg(" deleteFileID, mPsqlite3 is NULL\n");
+      LogError("mPsqlite3 is NULL");
       return -1;
    }
 
@@ -399,8 +393,7 @@ int32_t SIMPLE_DB::deleteFileID(string &uuid)
    ret = doCommit(zSQL, NULL, NULL, 0);
    if(ret)
    {
-      logmsg(" deleteFileID, doCommit failed \n");
-      logmsg(" deleteFileID, zSQL: ", zSQL, "\n");
+      LogError("doCommit failed zSQL: %s", zSQL);
    }
    
    if(zSQL)
diff --git a/src/simple-mtpfs-fuse.cpp b/src/simple-mtpfs-fuse.cpp
index bfabed8..c51e605 100755
--- a/src/simple-mtpfs-fuse.cpp
+++ b/src/simple-mtpfs-fuse.cpp
@@ -29,7 +29,7 @@ extern "C" {
 
 int wrap_getattr(const char *path, struct stat *statbuf)
 {
-    //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", enter\n");
+    LogDebug("enter getattr path:%s", path);
     return SMTPFileSystem::instance()->getattr(path, statbuf);
 }
 
@@ -80,35 +80,32 @@ int wrap_utime(const char *path, struct utimbuf *ubuf)
 
 int wrap_open(const char *path, struct fuse_file_info *file_info)
 {
-    //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", enter\n");
+    LogDebug("enter wrap_open path:%s", path);
     //return SMTPFileSystem::instance()->open(path, file_info);
     return 0;
 }
 
 int wrap_access(const char *path, int mask)
 {
-    //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", enter\n");
+    LogDebug("enter wrap_access path:%s", path);
     return SMTPFileSystem::instance()->access(path, mask);
 }
 
 int wrap_read(const char *path, char *buf, size_t size, off_t offset,
     struct fuse_file_info *file_info)
 {
-    //logmsg("size is ",size,"offset is ",offset,"\n");
-    //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", enter\n");
+    LogDebug("enter wrap_read, size is :%d offset is:%d", size, offset);
     return SMTPFileSystem::instance()->read(path, buf, size, offset, file_info);
 	
 }
 
 int wrap_readbuf(const char *path, struct fuse_bufvec **bufp, size_t size, off_t off, struct fuse_file_info *fileinfo)
 {
-
-   //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", enter\n");
-	//logmsg("size is ",size,"offset is ",off,"\n");
+	LogDebug("enter wrap_readbuf, size is :%d offset is:%d", size, off);
 	int readsize = 0;
 	struct fuse_bufvec* fbuf =(struct fuse_bufvec*)malloc(sizeof(struct fuse_bufvec));
-   if(!fbuf)
-      return -ENOENT;
+	if(!fbuf)
+		return -ENOENT;
 	*fbuf = FUSE_BUFVEC_INIT(size);
 	void* mem = NULL;
 	mem = malloc(size);
@@ -129,52 +126,52 @@ int wrap_write(const char *path, const char *buf, size_t size, off_t offset,
 
 int wrap_statfs(const char *path, struct statvfs *stat_info)
 {
-    //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", enter\n");
+    LogDebug("enter wrap_statfs, path:%s", path);
     return SMTPFileSystem::instance()->statfs(path, stat_info);
 }
 
 int wrap_flush(const char *path, struct fuse_file_info *file_info)
 {
-    //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", enter\n");
+    LogDebug("enter wrap_flush, path:%s", path);
     return SMTPFileSystem::instance()->flush(path, file_info);
 }
 
 int wrap_release(const char *path, struct fuse_file_info *file_info)
 {
-    //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", enter\n");
+    LogDebug("enter wrap_release, path:%s", path);
     //return SMTPFileSystem::instance()->release(path, file_info);
 	 return 0;
 }
 
 int wrap_fsync(const char *path, int datasync, struct fuse_file_info *file_info)
 {
-   //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", enter\n");
+    LogDebug("enter wrap_fsync, path:%s", path);
     return SMTPFileSystem::instance()->fsync(path, datasync, file_info);
 }
 
 int wrap_opendir(const char *path, struct fuse_file_info *file_info)
 {   
-    //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", enter\n");
+    LogDebug("enter wrap_opendir, path:%s", path);
     return SMTPFileSystem::instance()->opendir(path, file_info);
 }
 
 int wrap_readdir(const char *path, void *buf, fuse_fill_dir_t filler,
     off_t offset, struct fuse_file_info *file_info)
 {
-    //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", enter\n");
+    LogDebug("enter wrap_readdir, path:%s, offset:%d", path, offset);
     return SMTPFileSystem::instance()->readdir(path, buf, filler,
         offset, file_info);
 }
 
 int wrap_releasedir(const char *path, struct fuse_file_info *file_info)
 {
-    //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", enter\n");
+    LogDebug("enter wrap_releasedir, path:%s", path);
     return SMTPFileSystem::instance()->releasedir(path, file_info);
 }
 
 int wrap_fsyncdir(const char *path, int datasync, struct fuse_file_info *file_info)
 {
-    //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", enter\n");
+    LogDebug("enter wrap_fsyncdir, path:%s", path);
     return SMTPFileSystem::instance()->fsyncdir(path, datasync, file_info);
 }
 
@@ -314,7 +311,7 @@ bool SMTPFileSystem::parseOptions(int argc, char **argv)
     };
 
     if (argc < 2) {
-        logmsg("Wrong usage.\n");
+        LogError("Wrong usage");
         m_options.m_good = false;
         return false;
     }
@@ -337,7 +334,7 @@ bool SMTPFileSystem::parseOptions(int argc, char **argv)
     }
 
     if (!m_options.m_mount_point) {
-        logmsg("Mount point missing.\n");
+        LogError("Mount point missing");
         m_options.m_good = false;
         return false;
     }
@@ -346,7 +343,6 @@ bool SMTPFileSystem::parseOptions(int argc, char **argv)
     fuse_opt_add_arg(&m_args, "-s");
 
     if (m_options.m_verbose) {
-        Logger::setGlobalVerbose();
         fuse_opt_add_arg(&m_args, "-f");
     }
 
@@ -413,12 +409,12 @@ bool SMTPFileSystem::exec()
         return true;
 
     if (!smtpfs_check_dir(m_options.m_mount_point)) {
-        logmsg("Can not mount the device to '", m_options.m_mount_point, "'.\n");
+        LogError("Can not mount the device to %s", m_options.m_mount_point);
         return false;
     }
 
     if (!m_tmp_files_pool.createTmpDir()) {
-        logmsg("Can not create a temporary directory.\n");
+        LogError("Can not create a temporary directory");
         return false;
     }
 
@@ -436,12 +432,12 @@ bool SMTPFileSystem::exec()
         return false;
     }
 
-    logmsg("m_device.disconnect.\n");
+    LogInfo("m_device.disconnect");
     m_device.disconnect();
-    logmsg("m_device.disconnect ok.\n");
+    LogInfo("m_device.disconnect ok");
 
     m_tmp_files_pool.removeTmpDir();
-    logmsg("removeTmpDir ok.\n");
+    LogInfo("removeTmpDir ok");
 
     return true;
 }
@@ -453,7 +449,7 @@ void* SMTPFileSystem::init(struct fuse_conn_info *conn)
 
 int SMTPFileSystem::getattr(const char *path, struct stat *buf)
 {
-	//logmsg("  fun: ", __FUNCTION__, "  path: ", path, ", enter\n");
+	LogDebug(" enter getattr path: %s", path);
 
 	memset(buf, 0, sizeof(struct stat));
 	struct fuse_context *fc = fuse_get_context();
@@ -463,7 +459,7 @@ int SMTPFileSystem::getattr(const char *path, struct stat *buf)
 	{
 		buf->st_mode = S_IFDIR | 0775;
 		buf->st_nlink = 2;
-		//logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", err000 \n");
+		LogInfo("err 000 path=='/'");
 		return 0;
 	} 
 	else 
@@ -481,7 +477,7 @@ int SMTPFileSystem::getattr(const char *path, struct stat *buf)
 				buf->st_mode = S_IFDIR | 0775;
 				buf->st_nlink = 2;
 				buf->st_mtime = dir->modificationDate();
-				//logmsg("  fun: ", __FUNCTION__, "  path: ", path, ", is dir\n");
+				LogDebug("path:%s is dir", path);
 				return 0;
 			} 
 			else if (content->file(tmp_file)) 
@@ -495,15 +491,14 @@ int SMTPFileSystem::getattr(const char *path, struct stat *buf)
 				buf->st_mtime = file->modificationDate();
 				buf->st_ctime = buf->st_mtime;
 				buf->st_atime = buf->st_mtime;
-				//logmsg("  fun: ", __FUNCTION__, "  path: ", path, ", is file\n");
+				LogDebug("path:%s is file", path);
 				return 0;
 			} 
 		}
 
 		if(isFile)
 		{
-			//logmsg("  fun: ", __FUNCTION__, "  path: ", path, ", query file from db\n");
-
+			LogDebug("query file %s from db", path);
 			//find the file from smtpfs.db
 			uint32_t fileId = 0;
 			string pathStr = path;
@@ -512,13 +507,13 @@ int SMTPFileSystem::getattr(const char *path, struct stat *buf)
 			//get file info by database
 			if(fileId && !m_device.getFileInfoById(fileId, buf))
 			{
-				//logmsg("  fun: ", __FUNCTION__, "  path: ", path, ", exist in db\n");
+				LogDebug("file %s exist in db", path);
 				return 0;
 			}
 			//if the file dose not exist in database
 			else 
 			{
-				logmsg("  fun: ", __FUNCTION__, "  path: ", path, ", fileId: ", fileId, ", not exist in db, failed\n");
+				LogError("file %s not exist in db", path);
 				return -ENOENT;
 			}
 		}
@@ -528,11 +523,11 @@ int SMTPFileSystem::getattr(const char *path, struct stat *buf)
 			buf->st_mode = S_IFDIR | 0775;
 			buf->st_nlink = 2;
 			buf->st_mtime = time(NULL);
-			logmsg("  fun: ", __FUNCTION__, "  path: ", path, ", is fake dir\n");
+			LogInfo(" %s is fake dir", path);
 		}
 	}
 
-	//logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", exit\n");
+	LogDebug("exit getattr");
 
 	return 0;
 }
@@ -808,15 +803,14 @@ int SMTPFileSystem::fsync(const char *path, int datasync,
 
 int SMTPFileSystem::opendir(const char *path, struct fuse_file_info *file_info)
 {
-   //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", path: ", path, ", enter\n");
-
-   //note: for sunsang s5 or other non-reach device, 
-   //invoked LIBMTP_Get_Files_And_Folders_Count() to get the items totle count takes 22 seconds.
-   // for the 22 seconds, it will block read, so I create a detached pthread to get the count.
-   //Although the  LIBMTP_Get_Files_And_Folders_Count keep taking 22 seconds, but the openuri return 
-   //immediately, if the application invoke the readdir duration the 22 seconds, the readdir return . every 60ms.
-   int ret = m_device.dirFetchCount(std::string(path));
-   //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", exit\n");
+    LogDebug(" enter opendir, path:%s", path);
+    //note: for sunsang s5 or other non-reach device, 
+    //invoked LIBMTP_Get_Files_And_Folders_Count() to get the items totle count takes 22 seconds.
+    // for the 22 seconds, it will block read, so I create a detached pthread to get the count.
+    //Although the  LIBMTP_Get_Files_And_Folders_Count keep taking 22 seconds, but the openuri return 
+    //immediately, if the application invoke the readdir duration the 22 seconds, the readdir return . every 60ms.
+    int ret = m_device.dirFetchCount(std::string(path));
+    LogDebug(" exit opendir");
 
    return ret;
 }
@@ -824,12 +818,12 @@ int SMTPFileSystem::opendir(const char *path, struct fuse_file_info *file_info)
 int SMTPFileSystem::readdir(const char *path, void *buf, fuse_fill_dir_t filler,
     off_t offset, struct fuse_file_info *file_info)
 {
-    //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ",path: ", path, ",offset: ", offset, ", enter\n");
+    LogDebug(" enter readdir, path:%s", path);
     const TypeDir *contentCache = m_device.dirFetchContentFromCache(std::string(path));
     if (!contentCache)
     {   
-      logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", content is NULL\n");
-      return -ENOENT;
+        LogError("content is NULL");
+        return -ENOENT;
     }
     bool fetchedHandleOld = contentCache->getFetchHandleDone();
     uint32_t oldFetcheOffset = contentCache->getFetchedOffset();
@@ -838,8 +832,8 @@ int SMTPFileSystem::readdir(const char *path, void *buf, fuse_fill_dir_t filler,
     const TypeDir *content = m_device.dirFetchContent(std::string(path), &itemType);
     if (!content)
     {   
-      logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", content is NULL\n");
-      return -ENOENT;
+        LogError("content is NULL");
+        return -ENOENT;
     }
 
     bool fetchedHandleNew = content->getFetchHandleDone();
@@ -848,33 +842,33 @@ int SMTPFileSystem::readdir(const char *path, void *buf, fuse_fill_dir_t filler,
     // so the application may get many . dirs, application just need ignore more . dirs
     if((fetchedHandleOld == false) && (fetchedHandleOld == fetchedHandleNew))
     {
-      //please do not remove the delay
-      //because simple-mtpfs will always return . dir to application until 
-      //the LIBMTP_Get_Files_And_Folders_Count() return, so it may lead to endless loop or 
-      //make cpu usage upon to high level, so simple-mtpfs itself do a usleep(60000) to reduce
-      //the . dir counts and avoid cpu high usage.       
-      usleep(60000);
-      struct stat tmpst;
-      memset(&tmpst, 0, sizeof(tmpst));
-      tmpst.st_mode = S_IFDIR | 0775;
-
-      filler(buf, ".", &tmpst, offset+1);
-
-      //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", fill .\n");
+        //please do not remove the delay
+        //because simple-mtpfs will always return . dir to application until 
+        //the LIBMTP_Get_Files_And_Folders_Count() return, so it may lead to endless loop or 
+        //make cpu usage upon to high level, so simple-mtpfs itself do a usleep(60000) to reduce
+        //the . dir counts and avoid cpu high usage.       
+        usleep(60000);
+        struct stat tmpst;
+        memset(&tmpst, 0, sizeof(tmpst));
+        tmpst.st_mode = S_IFDIR | 0775;
+
+        filler(buf, ".", &tmpst, offset+1);
+
+        LogDebug("fill offset:%d", offset);
       
-      return 0;
+        return 0;
     }
     //if LIBMTP_Get_Files_And_Folders_Count() had done, 
     //first reset the offset, then return the read items.
     else if((fetchedHandleOld == false) && (fetchedHandleOld != fetchedHandleNew))
     {
-      offset = 0;
-      //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", reset offset to 0\n");
+        offset = 0;
+        LogDebug("reset offset to 0");
     }
     else if((fetchedHandleOld == fetchedHandleNew) && !oldFetcheOffset && content->getFetchedOffset())
     {
-      offset = 0;
-      //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", reset offset to 0 again\n");
+        offset = 0;
+        LogDebug("reset offset to 0 again");
     }
     
     const std::vector<TypeDir> dirs = content->dirs();
@@ -883,121 +877,119 @@ int SMTPFileSystem::readdir(const char *path, void *buf, fuse_fill_dir_t filler,
     
     if(offset >= content->getItemCount())
     {
-       //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", reach max\n");
-       return -ENOENT;
+        LogError("reach max");
+        return -ENOENT;
     }
     //item type is folder 
     if(dirs.size() && (itemType == MTP_ITEMTYPE_FOLDER))
     {
-       //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, "\n");
-      TypeDir d = dirs[dirs.size() - 1];
-
-      struct stat st;
-      memset(&st, 0, sizeof(st));
-      st.st_ino = d.id();
-      st.st_mode = S_IFDIR | 0775;
-
-      #if 0
-      if(content->getItemCount() == (dirs.size() + files.size()))
-      {
-         id = 0;
-      }
-      else
-      #endif
-      {
-         id = offset + 1;
-      }
-
-      filler(buf, d.name().c_str(), &st, id);
+        LogDebug("item is folder");
+        TypeDir d = dirs[dirs.size() - 1];
+
+        struct stat st;
+        memset(&st, 0, sizeof(st));
+        st.st_ino = d.id();
+        st.st_mode = S_IFDIR | 0775;
+
+        #if 0
+        if(content->getItemCount() == (dirs.size() + files.size()))
+        {
+           id = 0;
+        }
+        else
+        #endif
+        {
+            id = offset + 1;
+        }
+
+        filler(buf, d.name().c_str(), &st, id);
       
-      //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", id: ", id, "-",d.name().c_str() ,", is dir\n");
+        LogDebug("%s is dir", d.name().c_str());
     }
     //item type is file
     else if(files.size() && (itemType == MTP_ITEMTYPE_FILE)) 
     {
-      TypeFile f = files[files.size() - 1];
-      struct stat st;
-      memset(&st, 0, sizeof(st));
-      st.st_ino = f.id();
-      st.st_mode = S_IFREG | 0644;
-
-      #if 0
-      if(content->getItemCount() == (dirs.size() + files.size()))
-      {
-         id = 0;
-      }
-      else
-      #endif
-      {
-         id = offset + 1;
-      }
-
-      filler(buf, f.name().c_str(), &st, id);
-
-      //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", id: ", id, "-",f.name().c_str() ,", is file\n");
+        TypeFile f = files[files.size() - 1];
+        struct stat st;
+        memset(&st, 0, sizeof(st));
+        st.st_ino = f.id();
+        st.st_mode = S_IFREG | 0644;
+
+        #if 0
+        if(content->getItemCount() == (dirs.size() + files.size()))
+        {
+            id = 0;
+        }
+        else
+        #endif
+        {
+            id = offset + 1;
+        }
+
+        filler(buf, f.name().c_str(), &st, id);
+
+        LogDebug("%s is file", f.name().c_str());
    }
    //item type is unknow type,it presents the item had exist
    else
    {
-      //for exist item, first fetch the dir by offset
-      if(dirs.size() && (offset < dirs.size()))
-      {
-         TypeDir d = dirs[offset];
-
-         struct stat st;
-         memset(&st, 0, sizeof(st));
-         st.st_ino = d.id();
-         st.st_mode = S_IFDIR | 0775;
-
-         #if 0
-         if((content->getItemCount() == dirs.size()) && (offset == (dirs.size() - 1)))
-         {
-            id = 0;
-         }
-         else
-         #endif
-         {
-            id = offset + 1;
-         }
-
-         filler(buf, d.name().c_str(), &st, id);
+        //for exist item, first fetch the dir by offset
+        if(dirs.size() && (offset < dirs.size()))
+        {
+            TypeDir d = dirs[offset];
+
+            struct stat st;
+            memset(&st, 0, sizeof(st));
+            st.st_ino = d.id();
+            st.st_mode = S_IFDIR | 0775;
+
+            #if 0
+            if((content->getItemCount() == dirs.size()) && (offset == (dirs.size() - 1)))
+            {
+                id = 0;
+            }
+            else
+            #endif
+            {
+                id = offset + 1;
+            }
+
+            filler(buf, d.name().c_str(), &st, id);
          
-         //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", id: ", id, "-",d.name().c_str(), ", is old dir\n");
-      }
-      //for exist item,  fetch the file by offset
-      else if(files.size() && (offset < (files.size() + dirs.size())))
-      {
-         TypeFile f = files[offset - dirs.size()];
-         struct stat st;
-         memset(&st, 0, sizeof(st));
-         st.st_ino = f.id();
-         st.st_mode = S_IFREG | 0644;
+            LogDebug("%s is old dir", d.name().c_str());
+        }
+        //for exist item,  fetch the file by offset
+        else if(files.size() && (offset < (files.size() + dirs.size())))
+        {
+            TypeFile f = files[offset - dirs.size()];
+            struct stat st;
+            memset(&st, 0, sizeof(st));
+            st.st_ino = f.id();
+            st.st_mode = S_IFREG | 0644;
          
-         #if 0
-         if((content->getItemCount() == (files.size() + dirs.size())) && (offset == (dirs.size() + files.size() - 1)))
-         {
-            id = 0;
-         }
-         else
-         #endif
-         {
-            id = offset + 1;
-         }
-         filler(buf, f.name().c_str(), &st, id);
-
-         //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", id: ", id, "-",f.name().c_str() ,", is old file\n");
-      }
-      //exception, no items
-      else
-      {
-          logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", id: ", id, ", unknown\n");
-      }
-   }
-
-
-   //logerr("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", exit\n");
+            #if 0
+            if((content->getItemCount() == (files.size() + dirs.size())) && (offset == (dirs.size() + files.size() - 1)))
+            {
+                id = 0;
+            }
+            else
+            #endif
+            {
+                id = offset + 1;
+            }
+            filler(buf, f.name().c_str(), &st, id);
+
+            LogDebug("%s is old file", f.name().c_str());
+        }
+        //exception, no items
+        else
+        {
+            LogError(" %d is unknown", id);
+        }
+    }
 
-   return 0;
+    LogDebug("exit readdir");
+    return 0;
 }
 
 int SMTPFileSystem::releasedir(const char *path, struct fuse_file_info *file_info)
@@ -1023,11 +1015,11 @@ int SMTPFileSystem::ftruncate(const char *path, off_t offset,
 
 int SMTPFileSystem::access(const char *path, int mask)
 {
-	//logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", path: ", path, "\n");
+	LogDebug(" enter access, path:%s", path);
 
 	if(!path)
 	{
-		logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", path is NULL\n");
+		LogError("path is NULL");
 		return -EINVAL;
 	}
 
@@ -1036,13 +1028,13 @@ int SMTPFileSystem::access(const char *path, int mask)
 	std::string tmp_dirname(smtpfs_dirname(std::string(path)));
 	if(tmp_basename == tmp_dirname)
 	{
-		logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", basename == dirname\n");
+		LogInfo("basename == dirname");
 		return 0;
 	}
 
 	if(tmp_basename.empty())
 	{
-		logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", basename is empty\n");
+		LogInfo("basename basename is empty");
 		return 0;
 	}
 
@@ -1054,42 +1046,42 @@ int SMTPFileSystem::access(const char *path, int mask)
 		const TypeFile *file = parent->file(tmp_basename);
 		if(file)
 		{
-			//logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", path: ", path, ", exist in cache\n");
+			LogDebug("path:%s exist in cache", path);
 			isInCache = true;
 		}
 		else
 		{
-			//logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", path: ", path, ", not exist in cache\n");
+			LogDebug("path:%s not exist in cache", path);
 			isInCache = false;
 		}
 	}
 
 	if(isInCache == false)
 	{
-		//logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", path: ", path, ", query from db\n");
+		LogDebug("query from db path:%s ", path);;
 
 		uint32_t fileId = 0;
 		string pathStr = path;
 		m_device.queryFileID(pathStr, m_device.getUUID(), &fileId);
 		if(!fileId)
 		{
-			logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, "path: ", path, " not exist in db\n");
+			LogError("not exist in db, path:%s", path);
 			return -ENOENT;
 		}
 	}
 
 	if(mask & W_OK)
 	{
-		logmsg(" access, query W_OK return EINVAL\n");
+		LogInfo(" access, query W_OK return EINVAL");
 		return -EINVAL;
 	}
 
 	if(mask & X_OK)
 	{
-		logmsg(" access, query X_OK return EINVAL\n");
+		LogInfo(" access, query X_OK return EINVAL");
 		return -EINVAL; 
 	}
 
-	logmsg("  fun: ", __FUNCTION__, ",path: ", path, ", ok\n");
+	LogInfo("exit access");
 	return 0;
 }
\ No newline at end of file
diff --git a/src/simple-mtpfs-log.cpp b/src/simple-mtpfs-log.cpp
index ab41c07..6c0c448 100755
--- a/src/simple-mtpfs-log.cpp
+++ b/src/simple-mtpfs-log.cpp
@@ -20,10 +20,116 @@
 #include <ctime>
 #include "simple-mtpfs-log.h"
 
-Logger logmsg;
+bool Logger::m_isInited = false;
+Logger::SMTP_LOG_LEVEL Logger::m_logLevel = SMTP_LOG_LEVEL_INFO;
+string Logger::m_logPath = "/tmp/smtp.log";
 
-bool Logger::s_verbose;
-std::mutex Logger::s_output_mutex;
+void Logger::init()
+{
+    if (m_isInited) {
+        return;
+    }
+ 
+    freopen(m_logPath.c_str(), "w", stdout);
+
+    /* before smtp running, we can set log level by set the environment variable  SMTP_LOG_LEVEL */
+    const char *logLevelEnv = getenv("SMTP_LOG_LEVEL");
+    if (logLevelEnv != NULL) {
+        std::string level = logLevelEnv;
+        if (level == "VERBOSE")
+            m_logLevel = SMTP_LOG_LEVEL_VERBOSE;
+        else if (level == "DEBUG")
+            m_logLevel = SMTP_LOG_LEVEL_DEBUG;
+        else if (level == "INFO")
+            m_logLevel = SMTP_LOG_LEVEL_INFO;
+        else if (level == "WARNING")
+            m_logLevel = SMTP_LOG_LEVEL_WARNING;
+        else if (level == "ERROR")
+            m_logLevel = SMTP_LOG_LEVEL_ERROR;
+        else if (level == "OFF")
+            m_logLevel = SMTP_LOG_LEVEL_OFF;
+        else
+            m_logLevel = SMTP_LOG_LEVEL_INFO;
+    } else {
+        m_logLevel = SMTP_LOG_LEVEL_INFO;
+    }
+
+
+    /* -- set libmtp log level start --
+    Setting libmtp debug level according to the SMTP_LOG_LEVEL, libmtp log and smtp log will output to one log file
+    SMTP_LOG_LEVEL_INFO will enable libmtp basic log //basic log is not controlled by the LIBMTP_DEBUG env, it's controlled by Logger::isEnableLibmtpLog()
+    SMTP_LOG_LEVEL_DEBUG will enable basic log and PTP/PLAYLIST/USB debug log
+    SMTP_LOG_LEVEL_VERBOSE will enable basic log, PTP/PLAYLIST/USB debug log and usb data dump
+    other SMTP_LOG_LEVEL will disable libmtp debug log */
+    int ret = -1;
+    if (m_logLevel == SMTP_LOG_LEVEL_DEBUG) {
+        ret = setenv("LIBMTP_DEBUG", "7", 1);
+    } else if (m_logLevel == SMTP_LOG_LEVEL_VERBOSE) {
+        ret = setenv("LIBMTP_DEBUG", "9", 1);
+    } else {
+        ret = setenv("LIBMTP_DEBUG", "0", 1);
+    }
+    if (ret != 0) {
+        LogError("failed to set libmtp debug env");
+    }
+
+    const char *libmtpenv = getenv("LIBMTP_DEBUG");
+    LogInfo("get setted libmtp env:%s", libmtpenv);
+    /* -- set libmtp log level end -- */
+
+    m_isInited = true;
+
+    LogInfo("logger initialized, loglevel is:%s", toString(m_logLevel).c_str());
+}
+
+void Logger::Log(const char *format, SMTP_LOG_LEVEL logLevel, const char* funcName, int line, ...)
+{
+    if (m_logLevel > logLevel)
+        return;
+
+    std::string logTag;
+    if (logLevel == SMTP_LOG_LEVEL_VERBOSE) {
+        logTag = "SMTP DUMP ";
+    } else if (logLevel == SMTP_LOG_LEVEL_DEBUG) {
+        logTag = "SMTP DEBUG ";
+    } else if (logLevel == SMTP_LOG_LEVEL_INFO) {
+        logTag = "SMTP INFO ";
+    } else if (logLevel == SMTP_LOG_LEVEL_WARNING) {
+        logTag = "SMTP WARN ";
+    } else if (logLevel == SMTP_LOG_LEVEL_ERROR) {
+        logTag = "SMTP ERROR ";
+    } else {
+        logTag = "SMTP LOG ";
+    }
+    
+    va_list args;
+    va_start(args, line);
+        
+    freopen(m_logPath.c_str(), "a", stdout);
+    stringstream appendFormat;
+    appendFormat << logTag
+    // << timestamp() << " " 
+    << getSysRunTime()/1000 << "." << std::setw(3) << getSysRunTime()%1000
+    << "s T" << gettid() 
+    << " " << funcName 
+    << "[" << line <<"] " 
+    << format << "\n";
+    vfprintf(stdout, appendFormat.str().c_str(), args); 
+    fflush(stdout);
+
+    va_end(args);
+}
+
+bool Logger::isEnableLibmtpLog() 
+{
+    if (m_logLevel == SMTP_LOG_LEVEL_VERBOSE || 
+        m_logLevel == SMTP_LOG_LEVEL_DEBUG ||
+        m_logLevel == SMTP_LOG_LEVEL_INFO) {
+        return true;
+    } else {
+        return false;
+    }
+}
 
 std::string Logger::timestamp()
 {
@@ -40,3 +146,30 @@ std::string Logger::timestamp()
         << ':' << std::setw(2) << time_info->tm_sec;
     return ss.str();
 }
+
+long Logger::getSysRunTime()
+{
+    struct timespec ts;
+    clock_gettime(CLOCK_MONOTONIC, &ts);
+    return ts.tv_sec * 1000L +
+           ts.tv_nsec / 1000000L;
+}
+
+string Logger::toString(SMTP_LOG_LEVEL level){
+    switch (level) {
+        case SMTP_LOG_LEVEL_VERBOSE:
+            return "SMTP_LOG_LEVEL_VERBOSE";
+        case SMTP_LOG_LEVEL_DEBUG:
+            return "SMTP_LOG_LEVEL_DEBUG";
+        case SMTP_LOG_LEVEL_INFO:
+            return "SMTP_LOG_LEVEL_INFO";
+        case SMTP_LOG_LEVEL_ERROR:
+            return "SMTP_LOG_LEVEL_ERROR";
+        case SMTP_LOG_LEVEL_OFF:
+            return "SMTP_LOG_LEVEL_OFF";
+        default:
+            return "SMTP_LOG_LEVEL_UNKNOWN";
+    }
+}
+
+
diff --git a/src/simple-mtpfs-log.h b/src/simple-mtpfs-log.h
index a903006..657e94f 100755
--- a/src/simple-mtpfs-log.h
+++ b/src/simple-mtpfs-log.h
@@ -19,121 +19,53 @@
 #define SMTPFS_LOG_H
 
 #include <iostream>
-#include <fstream>
 #include <iomanip>
-#include <sstream>
-#include <mutex>
+#include <time.h>
+#include <stdarg.h>
+#include <string.h>
+#include <unistd.h>
+#include <sys/syscall.h>
 
-class  Logger;
-extern Logger logmsg;
+class Logger;
 
 using namespace std;
 
-class Logger
-{
-public:
-    Logger(const string &fixed_message = string()):
-        m_fixed_message(fixed_message),
-        m_verbose(false)
-    {
-        
-    }
-
-    ~Logger()
-    {
-       if(mLog.is_open() == true)
-       {
-           mLog << "close smtpfs.log" << endl;
-           //mLog.flush();
-           mLog.close();
-       }
-    }
-
-    template <typename t, typename ...p>
-    void output(t data, p ...args)
-    {
-        if(!m_verbose && !s_verbose)
-        {
-            if(mLog.is_open() == false)
-            {
-                mLog.open("/tmp/smtpfs.log", ios::out|ios::app);
-                mLog << "open smtpfs.log" << endl;
-            }
-        }
-
-        //if (!s_verbose && !m_verbose)
-        //    return;
-        
-        criticalEnter();
-        if(mLog.is_open() == true)
-        {
-            mLog << timestamp();
-
-            if (!m_fixed_message.empty())
-            {
-                mLog << ": " << m_fixed_message;
-            }
-            mLog << ": ";
-        }
-        else
-        {
-            cout << timestamp();
-
-            if (!m_fixed_message.empty())
-            {
-                cout << ": " << m_fixed_message;
-            }
-            cout << ": ";
-        }
+#pragma GCC system_header
 
-        outputHelper(data, args...);
+#define gettid() syscall(__NR_gettid)
 
-        if(mLog.is_open() == true)
-        {
-            mLog.flush();
-        }
+#define  LogDump(format, ...) Logger::Log(format, Logger::SMTP_LOG_LEVEL_VERBOSE, __FUNCTION__, __LINE__, ##__VA_ARGS__)
+#define  LogDebug(format, ...) Logger::Log(format, Logger::SMTP_LOG_LEVEL_DEBUG, __FUNCTION__, __LINE__, ##__VA_ARGS__)
+#define  LogInfo(format, ...) Logger::Log(format, Logger::SMTP_LOG_LEVEL_INFO, __FUNCTION__, __LINE__, ##__VA_ARGS__)
+#define  LogWarning(format, ...) Logger::Log(format, Logger::SMTP_LOG_LEVEL_WARNING, __FUNCTION__, __LINE__, ##__VA_ARGS__)
+#define  LogError(format, ...) Logger::Log(format, Logger::SMTP_LOG_LEVEL_ERROR, __FUNCTION__, __LINE__, ##__VA_ARGS__)
 
-        criticalLeave();
-        
-    }
-
-    template<typename t, typename ...p>
-    void operator() (t data, p ...args)
-    {
-        output(data, args...);
-    }
+class Logger
+{
+public:
+    typedef enum {
+        SMTP_LOG_LEVEL_VERBOSE = 0,
+        SMTP_LOG_LEVEL_DEBUG,
+        SMTP_LOG_LEVEL_INFO,
+        SMTP_LOG_LEVEL_WARNING,
+        SMTP_LOG_LEVEL_ERROR,
+        SMTP_LOG_LEVEL_OFF
+    } SMTP_LOG_LEVEL;
 
-    void setVerbose(bool v = true) { m_verbose = v; }
-    static void setGlobalVerbose(bool v = true) { s_verbose = v; }
+public:
+    static void init();
+    static void Log(const char *format, SMTP_LOG_LEVEL logLevel, const char* funcName, int line, ...);
+    static bool isEnableLibmtpLog();
 
 private:
     static std::string timestamp();
-    static void criticalEnter() { s_output_mutex.lock(); }
-    static void criticalLeave() { s_output_mutex.unlock(); }
-
-    void outputHelper() { }
-
-    template <typename T, typename ...P>
-    void outputHelper(T t, P ...p)
-    {
-        if(mLog.is_open() == true)
-        {
-            mLog << t;
-        }
-        else
-        {
-            cout << t;
-        }
-        
-        if (sizeof...(p))
-            outputHelper(p...);
-    }
+    static long getSysRunTime();
+    static string toString(SMTP_LOG_LEVEL level);
 
-    static bool s_verbose;
-    static mutex s_output_mutex;
-    string m_fixed_message;
-    bool m_verbose;
-    ofstream mLog;
+private: 
+    static bool m_isInited;
+    static SMTP_LOG_LEVEL m_logLevel;
+    static string m_logPath;
 };
 
 #endif // SMTPFS_LOG_H
diff --git a/src/simple-mtpfs-main.cpp b/src/simple-mtpfs-main.cpp
index dac6262..219b913 100644
--- a/src/simple-mtpfs-main.cpp
+++ b/src/simple-mtpfs-main.cpp
@@ -22,6 +22,8 @@
 
 int main(int argc, char **argv)
 {
+    Logger::init();
+    
     SMTPFileSystem *filesystem = SMTPFileSystem::instance();
 
     if (!filesystem->parseOptions(argc, argv)) {
diff --git a/src/simple-mtpfs-mtp-device.cpp b/src/simple-mtpfs-mtp-device.cpp
index 27378ee..bb8871f 100755
--- a/src/simple-mtpfs-mtp-device.cpp
+++ b/src/simple-mtpfs-mtp-device.cpp
@@ -63,7 +63,7 @@ MTPDevice::~MTPDevice()
 bool MTPDevice::connect(LIBMTP_raw_device_t *dev)
 {
     if (m_device) {
-        logmsg("Already connected.\n");
+        LogInfo("Already connected");
         return true;
     }
 
@@ -87,25 +87,25 @@ bool MTPDevice::connect(LIBMTP_raw_device_t *dev)
 
     char tmpStr[128] = "";
 
-    //printf("vendor_id: %x, product_id: %x\n", dev->device_entry.vendor_id, dev->device_entry.product_id);
+    LogInfo("vendor_id: %x, product_id: %x", dev->device_entry.vendor_id, dev->device_entry.product_id);
 
     //sprintf(tmpStr, "%x_%x_", dev->device_entry.vendor_id, dev->device_entry.product_id);
 
     string seriaID = LIBMTP_Get_Serialnumber(m_device);
 
-    //printf("seriaID: %s\n", seriaID.c_str());
+    LogInfo("seriaID: %s", seriaID.c_str());
 
     mUUID = tmpStr + seriaID;
 
     writeDevice(mUUID);
-    logmsg("Connected.\n");
+    LogInfo("connected");
     return true;
 }
 
 bool MTPDevice::connect_priv(int dev_no, const std::string &dev_file)
 {
     if (m_device) {
-        logmsg("Already connected.\n");
+        LogInfo("Already connected");
         return true;
     }
 
@@ -121,19 +121,19 @@ bool MTPDevice::connect_priv(int dev_no, const std::string &dev_file)
     if (err != LIBMTP_ERROR_NONE) {
         switch(err) {
         case LIBMTP_ERROR_NO_DEVICE_ATTACHED:
-            logmsg("No raw devices found.\n");
+            LogError("No raw devices found.");
             break;
         case LIBMTP_ERROR_CONNECTING:
-            logmsg("There has been an error connecting. Exiting.\n");
+            LogError("There has been an error connecting. Exiting.");
             break;
         case LIBMTP_ERROR_MEMORY_ALLOCATION:
-            logmsg("Encountered a Memory Allocation Error. Exiting.\n");
+            LogError("Encountered a Memory Allocation Error. Exiting.");
             break;
         case LIBMTP_ERROR_GENERAL:
-            logmsg("General error occured. Exiting.\n");
+            LogError("General error occured. Exiting.");
             break;
         case LIBMTP_ERROR_USB_LAYER:
-            logmsg("USB Layer error occured. Exiting.\n");
+            LogError("USB Layer error occured. Exiting.");
             break;
         default:
             break;
@@ -153,7 +153,7 @@ bool MTPDevice::connect_priv(int dev_no, const std::string &dev_file)
                     break;
 
         if (dev_no == raw_devices_cnt) {
-            logmsg("Can not open such device '", dev_file, "'.\n");
+            LogError("Can not open such device '%s'", dev_file.c_str());
             free(static_cast<void*>(raw_devices));
             return false;
         }
@@ -161,7 +161,7 @@ bool MTPDevice::connect_priv(int dev_no, const std::string &dev_file)
 #endif // !HAVE_LIBUSB1
 
     if (dev_no < 0 || dev_no >= raw_devices_cnt) {
-        logmsg("Can not connect to device no. ", dev_no + 1, ".\n");
+        LogError("Can not connect to device no %d", dev_no + 1);
         free(static_cast<void*>(raw_devices));
         return false;
     }
@@ -170,7 +170,7 @@ bool MTPDevice::connect_priv(int dev_no, const std::string &dev_file)
 
     char tmpStr[128] = "";
 
-    //printf("vendor_id: %x, product_id: %x\n", raw_device->device_entry.vendor_id, raw_device->device_entry.product_id);
+    LogInfo("vendor_id: %x, product_id: %x\n", raw_device->device_entry.vendor_id, raw_device->device_entry.product_id);
 
     sprintf(tmpStr, "%x_%x_", raw_device->device_entry.vendor_id, raw_device->device_entry.product_id);
 
@@ -193,12 +193,12 @@ bool MTPDevice::connect_priv(int dev_no, const std::string &dev_file)
     // Retrieve capabilities.
     m_capabilities = MTPDevice::getCapabilities(*this);
 
-    logmsg("Connected.\n");
+    LogInfo("Connected.");
     g_device = m_device;
 
     string seriaID = LIBMTP_Get_Serialnumber(m_device);
 
-    //printf("seriaID: %s\n", LIBMTP_Get_Serialnumber(m_device));
+    LogInfo("seriaID: %s", seriaID.c_str());
     
     mUUID = tmpStr + seriaID;
 
@@ -215,13 +215,13 @@ bool MTPDevice::connect(int dev_no)
 bool MTPDevice::connect(const std::string &dev_file)
 {
     if (m_device) {
-        logmsg("Already connected.\n");
+        LogInfo("Already connected");
         return true;
     }
 
     LIBMTP_raw_device_t *raw_device = smtpfs_raw_device_new(dev_file);
     if (!raw_device) {
-        logmsg("Can not open such device '", dev_file, "'.\n");
+        LogError("Can not open such device %s", dev_file.c_str());
         return false;
     }
 
@@ -244,18 +244,15 @@ void MTPDevice::disconnect()
     if (!m_device)
         return;
 
-    logmsg("MTPDevice::disconnect start.\n");
+    LogInfo("MTPDevice::disconnect start");
     
     LIBMTP_Release_Device(m_device);
 
-    logmsg("MTPDevice::disconnect 1111.\n");
     m_device = nullptr;
-    logmsg("MTPDevice::disconnect 2222.\n");
     g_device = m_device;
-    logmsg("MTPDevice::disconnect 33333.\n");
     mUUID = "";
     
-    logmsg("Disconnected ok.\n");
+    LogInfo("Disconnected ok");
 }
 
 uint64_t MTPDevice::storageTotalSize() const
@@ -281,7 +278,7 @@ bool MTPDevice::enumStorages()
     if (LIBMTP_Get_Storage(m_device, LIBMTP_STORAGE_SORTBY_NOTSORTED) < 0) {
         std::cerr << "Could not retrieve device storage.\n";
         std::cerr << "For android phones make sure the screen is unlocked.\n";
-        logmsg("Could not retrieve device storage. Exiting.\n");
+        LogError("Could not retrieve device storage. Exiting");
         LIBMTP_Dump_Errorstack(m_device);
         LIBMTP_Clear_Errorstack(m_device);
         return false;
@@ -292,12 +289,12 @@ bool MTPDevice::enumStorages()
 
 const TypeDir *MTPDevice::dirFetchContentFromCache(std::string path)
 {
-    //logmsg("  fun: ", __FUNCTION__, ", line: ", __LINE__, ",path: ", path, ", enter\n");
+    LogDebug("path:%s", path.c_str());
 
     if (!m_root_dir.isFetched()) {
         for (LIBMTP_devicestorage_t *s = m_device->storage; s; s = s->next) {
             m_root_dir.addDir(TypeDir(s_root_node, 0, s->id, std::string(s->StorageDescription)));
-            //logmsg("  fun: ", __FUNCTION__, ", line: ", __LINE__, ",path: ", path, ", setFetched()\n");
+            LogDebug("path:%s setFetched", path.c_str());
             m_root_dir.setFetched();
         }
     }
@@ -307,7 +304,7 @@ const TypeDir *MTPDevice::dirFetchContentFromCache(std::string path)
 
     if (path == "/")
     {
-       //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, "\n");
+        LogInfo("path is / , return m_root_dir");
         return &m_root_dir;
     }
 
@@ -315,8 +312,6 @@ const TypeDir *MTPDevice::dirFetchContentFromCache(std::string path)
     std::istringstream ss(path);
     TypeDir *dir = &m_root_dir;
 
-    //logmsg("  fun: ", __FUNCTION__, ", line: ", __LINE__, ",path: ", path, "\n");
-
     while (std::getline(ss, member, '/')) {
 		
         if (member.empty())
@@ -325,14 +320,14 @@ const TypeDir *MTPDevice::dirFetchContentFromCache(std::string path)
         const TypeDir *tmp = dir->dir(member);
         if (!tmp)
         {
-            //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", not found\n");
+            LogError("not found :%s", member.c_str());
             return nullptr;
         }
 		
         dir = const_cast<TypeDir*>(tmp);
     }
 
-    //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", dir->name: ", dir->name(), ", exit\n");
+    LogDebug("dir->name: %s, exit", dir->name().c_str());
     return dir;
 }
 
@@ -340,17 +335,17 @@ void* dirFetchCountThreadRUn(void *arg)
 {
    TypeDir *dir = (TypeDir *)arg;
 
-   //logmsg("enter  dirFetchCountThreadRUn \n");
-   
    if(dir == NULL)
    {
-      logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", dir is NULL\n");
+      LogError("dir is NULL");
       return NULL;
    }
 
+   LogInfo("enter  dirFetchCountThreadRUn dir name:%s", dir->name().c_str());
+
    if(g_device == NULL)
    {
-      logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", g_device is NULL\n");
+      LogError("g_device is NULL");
       return NULL;
    }
 
@@ -360,7 +355,7 @@ void* dirFetchCountThreadRUn(void *arg)
       ObjectHandles *handles = dir->getObjHandles();
       if(!handles)
       {
-         logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", handles is NULL\n");
+         LogError("handles is NULL");
          return NULL;
       }
 
@@ -372,7 +367,7 @@ void* dirFetchCountThreadRUn(void *arg)
       //3 the count is 0, but the real count is not 0.
       if(!i)
       {
-        // logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", LIBMTP_Get_Files_And_Folders_Count: ", dir->name(), "\n");
+         LogDebug("dir->name:%s", dir->name().c_str());
          
          dir->setFetchHandleDone(false);
          int retryCnt = 3;
@@ -384,40 +379,40 @@ void* dirFetchCountThreadRUn(void *arg)
 
          do 
          {
-            //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", 1111.\n");
             //criticalEnter1();
             if(!g_device) break;
             if(!gMTPDev) break;
 
-            //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", get lock start.\n");
+            LogDebug("get lock start");
             gMTPDev->criticalEnter1();
             gettimeofday(&startTime, NULL);
-            //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", call LIBMTP_Get_Files_And_Folders_Count start.\n");
+            LogDebug("call LIBMTP_Get_Files_And_Folders_Count start");
+            
+            StreamHelper::off();
             ret = LIBMTP_Get_Files_And_Folders_Count(g_device,
                      dir->storageid(),
                      dir->id(),
                      handles);
+            StreamHelper::on();
 
-            //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", call LIBMTP_Get_Files_And_Folders_Count ok.\n");
+            LogDebug("call LIBMTP_Get_Files_And_Folders_Count returned");
             gettimeofday(&endTime, NULL);
             gMTPDev->criticalLeave1();
-            //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", get lock end.\n");
+            LogDebug("get lock end");
 
              diffTime = (endTime.tv_sec - startTime.tv_sec);
              if(diffTime >= 2)
              {
-                logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", diffTIme: ", diffTime, ".\n");
-                logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", LIBMTP_Get_Files_And_Folders_Count: ", dir->name(), "\n");
+                LogInfo("dir name:%s, diffTIme: %ld", dir->name().c_str(), diffTime);
              }
 
             //criticalLeave1();
-            //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", 3333.\n");
 
-            //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", LIBMTP_Get_Files_And_Folders_Count done\n");
+            LogDebug("LIBMTP_Get_Files_And_Folders_Count done");
 
             if(ret < 0)
             {
-               logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", dir: ", dir->name(), ", LIBMTP_Get_Files_And_Folders_Count failed,go retry.\n");
+               LogInfo("LIBMTP_Get_Files_And_Folders_Count failed, go retry path:%s", dir->name().c_str());
                usleep(100000);
             }
             else
@@ -433,9 +428,9 @@ void* dirFetchCountThreadRUn(void *arg)
 
             if(handles->n >= 100)
 			{
-				logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", dir: ", dir->name(), ", count: ",handles->n, ", ok\n");
+				LogInfo("dirname: %s, count:%d", dir->name().c_str(), handles->n);
 			}
-            //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", done ok.\n");
+            LogDebug("get count done count:%d", handles->n);
          }
          //add here for debug
          else
@@ -443,32 +438,31 @@ void* dirFetchCountThreadRUn(void *arg)
 		    //if the dir timeout three times, discard it.
             dir->setFetchHandleDone(true);
             dir->setItemCount(0);
-            logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", failed, retry also failed\n");
+            LogInfo("get count failed, retry also failed");
          }
       }
 
    }while(0);
 
-   //logmsg("exit dirFetchCountThreadRUn \n");
+   LogInfo("exit dirFetchCountThreadRUn");
 
    return NULL;
 }
 
 int MTPDevice::dirFetchCount(std::string path)
 {
-   //logmsg("  fun: ", __FUNCTION__, ", line: ", __LINE__, ",path: ", path, ", enter\n");
+   LogDebug("enter path:%s", path.c_str());
 
    TypeDir *dir = (TypeDir *)dirFetchContentFromCache(path);
    if (!dir || dir->isFetched())
    {
-      //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", dir: ", dir, "isFetched: ", dir->isFetched(), "\n");
-      //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", feteched or NULL\n");
+      LogDebug("%s", dir == NULL ? "dir is null" : "dir isFetched");
       return 0;
    }
 
    if(dir->getFetchHandleDone() || dir->getItemCount()) 
    {
-      //logmsg("  fun: ", __FUNCTION__, ", line: ", __LINE__, ",path: ", path, ", count: ", dir->getItemCount(), ", had get count,return\n");
+      LogDebug("had get count :%d", dir->getItemCount());
       return 0;
    }
 
@@ -492,29 +486,26 @@ int MTPDevice::dirFetchCount(std::string path)
 
    pthread_attr_destroy(&attr);
 
-  // logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", exit\n");
+   LogDebug("exit");
    return 0;
 }
 
 const TypeDir *MTPDevice::dirFetchContent(std::string path, int *itemType)
 {
-    //logmsg("  fun: ", __FUNCTION__, ", line: ", __LINE__, ",path: ", path, ", enter\n");
+    LogDebug("enter path:%s", path.c_str());
 
     if(itemType == NULL)
     {
-       logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", itemType is NULL\n");
+       LogError("itemType is NULL");
        return nullptr;
     }
 
    TypeDir *dir = (TypeDir *)dirFetchContentFromCache(path);
 
-   //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", isFetched: ", dir->isFetched(), "\n");
-
-   //if(dir && dir->getItemCount())
    if (!dir || dir->isFetched())
    {
       itemType = MTP_ITEMTYPE_UNKOWN;
-      //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", feteched or NULL\n");
+      LogDebug("%s", dir == NULL ? "dir is null" : "dir isFetched from cache");
       return dir;
    }
 
@@ -524,7 +515,7 @@ const TypeDir *MTPDevice::dirFetchContent(std::string path, int *itemType)
 	ObjectHandles *handles = dir->getObjHandles();
 	if(!handles)
 	{
-		logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", handles is NULL\n");
+		LogError("handles is NULL");
 		return nullptr;
 	}
 
@@ -532,7 +523,7 @@ const TypeDir *MTPDevice::dirFetchContent(std::string path, int *itemType)
     //get handles by libmtp
     if(!i)
     {
-		logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", LIBMTP_Get_Files_And_Folders_Count\n");
+		LogInfo("LIBMTP_Get_Files_And_Folders_Count");
 
       int32_t ret = 0;
 		ret = LIBMTP_Get_Files_And_Folders_Count(m_device,
@@ -540,11 +531,11 @@ const TypeDir *MTPDevice::dirFetchContent(std::string path, int *itemType)
 					dir->id(),
 					handles);
 
-      logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", LIBMTP_Get_Files_And_Folders_Count done\n");
+        LogInfo("LIBMTP_Get_Files_And_Folders_Count done");
 
 		if(ret < 0)
 		{
-			logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", LIBMTP_Get_Files_And_Folders_Count failed.\n");
+			LogInfo("LIBMTP_Get_Files_And_Folders_Count failed.");
 			return nullptr;
 		}
 
@@ -553,55 +544,51 @@ const TypeDir *MTPDevice::dirFetchContent(std::string path, int *itemType)
     #else
     if(dir->getFetchHandleDone() == false)
     {
-       //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", getFetchHandleDone return\n");
+       LogDebug("getFetchHandleDone return");
        return dir;
     }
     #endif
 
 	//get files by libmtp
-	
-   //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", i:", i,",\n");
-   uint32_t tmpn = 1 + i;
-	
-   //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", handles->n:", handles->n,",\n");
-
+    uint32_t tmpn = 1 + i;
 	if(tmpn >= handles->n)
 	{
 		tmpn = handles->n;
 	}
 
+    LogDebug("i:%d, handles->n:%d", i, handles->n);
+
    struct timeval startTime, endTime;
    unsigned long diffTime;
 
 	for( ; i < tmpn; i++)
    {
        gettimeofday(&startTime, NULL);
-       //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", get lock before\n");
+       LogDebug("get lock start");
        criticalEnter1();
-       //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", call LIBMTP_Get_Files_And_Folders_ByHandle start \n");
+       LogDebug("call LIBMTP_Get_Files_And_Folders_ByHandle start");
+       StreamHelper::off();
        LIBMTP_file_t *f = LIBMTP_Get_Files_And_Folders_ByHandle(m_device, handles->Handler[i]);
-      // logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", call LIBMTP_Get_Files_And_Folders_ByHandle ok \n");
+       StreamHelper::on();
+       LogDebug("call LIBMTP_Get_Files_And_Folders_ByHandle end\n");
        criticalLeave1();
-       //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", get lock ok\n");
+       LogDebug("get lock end");
        gettimeofday(&endTime, NULL);
        diffTime = (endTime.tv_sec - startTime.tv_sec);
        if(diffTime >= 2)
        {
-          logmsg("  fun: ", __FUNCTION__, ", line: ", __LINE__, ", path: ", path, "\n");
-          logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", diffTime: ", diffTime, "\n");
+          LogDebug("path:%s, diffTime:%ld", path.c_str(), diffTime);
        }
 
        if(f == NULL)
        {
-          logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", i: ", i, ",\n");
-          logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", handles->Handler:", handles->Handler[i],",\n");
-          logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", f is null\n");
+          LogInfo("f is null, i:%d, handles->Handler[i]:%d", i, handles->Handler[i]);
           continue;
        }
 
 	    dir->setFetchedOffset(i+1);
 
-       //logmsg(i, "_filename:  ", f->filename, ", type: ", f->filetype, "\n");
+        LogDebug("filename:%s, filetype:%d", f->filename, f->filetype);
 
        if (f->filetype == LIBMTP_FILETYPE_FOLDER)
        {
@@ -617,7 +604,7 @@ const TypeDir *MTPDevice::dirFetchContent(std::string path, int *itemType)
          if(isMediaType(f->filename))
          {
             std::string filePath = "";
-            //printf("writeFileID, path: %s, dirname: %s\n", path.c_str(), dir->name().c_str());
+            LogDebug("writeFileID, path: %s, dirname: %s", path.c_str(), dir->name().c_str());
 
             if(path != "/")
             {
@@ -628,7 +615,7 @@ const TypeDir *MTPDevice::dirFetchContent(std::string path, int *itemType)
                filePath = path + f->filename;
             }
 
-            //logmsg("writeFileID, filePath: ", filePath, "\n");
+            LogDebug("writeFileID, filePath: %s", filePath.c_str());
             
             writeFileID(filePath, f->item_id, mUUID);
          }
@@ -637,26 +624,26 @@ const TypeDir *MTPDevice::dirFetchContent(std::string path, int *itemType)
        LIBMTP_Free_Files_And_Folders(&f); 
    }
 
-   //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ",setFetchedOffset: ", i, ", exit\n");
-
+   
    #if 0
    if(*itemType == MTP_ITEMTYPE_UNKOWN)
    {
-      dir->setFetchedOffset(i);
+        LogDebug("setFetchedOffset: %d", i);
+        dir->setFetchedOffset(i);
    }
    #endif
 
 	if(dir->getFetchedOffset() == handles->n)
 	{
-		//logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", LIBMTP_Free_ObjHandles\n");
+		LogDebug("LIBMTP_Free_ObjHandles");
     	LIBMTP_Free_ObjHandles(handles);
-      //logmsg("  fun: ", __FUNCTION__, ", line: ", __LINE__, ",path: ", path, ", setFetched()\n");
+        LogDebug("path:%s setFetched", path.c_str());
 		dir->setFetched();
 	}
 	
 	 //criticalLeave();
 
-    //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", exit\n");
+    LogDebug("exit dirFetchContent");
     return dir;
 }
 
@@ -667,7 +654,7 @@ int MTPDevice::dirCreateNew(const std::string &path)
     const std::string tmp_dirname(smtpfs_dirname(path));
     const TypeDir *dir_parent = dirFetchContentFromCache(tmp_dirname);
     if (!dir_parent || dir_parent->id() == 0) {
-        logmsg("Can not remove directory '", path, "'.\n");
+        LogError("Can not remove directory %s", path.c_str());
         return -EINVAL;
     }
     char *c_name = strdup(tmp_basename.c_str());
@@ -676,13 +663,13 @@ int MTPDevice::dirCreateNew(const std::string &path)
         dir_parent->id(), dir_parent->storageid());
     criticalLeave();
     if (new_id == 0) {
-        logmsg("Could not create directory '", path, "'.\n");
+        LogError("Could not create directory %s", path.c_str());
         LIBMTP_Dump_Errorstack(m_device);
         LIBMTP_Clear_Errorstack(m_device);
     } else {
         const_cast<TypeDir*>(dir_parent)->addDir(TypeDir(new_id, dir_parent->id(),
             dir_parent->storageid(), tmp_basename));
-        logmsg("Directory '", path, "' created.\n");
+        LogInfo("Directory %s created", path.c_str());
     }
     free(static_cast<void*>(c_name));
     return new_id != 0 ? 0 : -EINVAL;
@@ -695,7 +682,7 @@ int MTPDevice::dirRemove(const std::string &path)
     const TypeDir *dir_parent = dirFetchContentFromCache(tmp_dirname);
     const TypeDir *dir_to_remove = dir_parent ? dir_parent->dir(tmp_basename) : nullptr;
     if (!dir_parent || !dir_to_remove || dir_parent->id() == 0) {
-        logmsg("No such directory '", path, "' to remove.\n");
+        LogError("No such directory %s to remove", path.c_str());
         return -ENOENT;
     }
     if (!dir_to_remove->isEmpty())
@@ -704,13 +691,13 @@ int MTPDevice::dirRemove(const std::string &path)
     int rval = LIBMTP_Delete_Object(m_device, dir_to_remove->id());
     criticalLeave();
     if (rval != 0){
-        logmsg("Could not remove the directory '", path, "'.\n");
+        LogError("Could not remove the directory %s", path.c_str());
         LIBMTP_Dump_Errorstack(m_device);
         LIBMTP_Clear_Errorstack(m_device);
         return -EINVAL;
     }
     const_cast<TypeDir*>(dir_parent)->removeDir(*dir_to_remove);
-    logmsg("Folder '", path, "' removed.\n");
+    LogInfo("Folder %s removed", path.c_str());
     return 0;
 }
 
@@ -723,12 +710,11 @@ int MTPDevice::dirRename(const std::string &oldpath, const std::string &newpath)
     const TypeDir *dir_parent = dirFetchContentFromCache(tmp_old_dirname);
     const TypeDir *dir_to_rename = dir_parent ? dir_parent->dir(tmp_old_basename) : nullptr;
     if (!dir_parent || !dir_to_rename || dir_parent->id() == 0) {
-        logmsg("Can not rename '", tmp_old_basename, "' to '",
-            tmp_new_basename, "'.\n");
+        LogError("can't rename %s to %s", tmp_old_basename.c_str(), tmp_new_basename.c_str());
         return -EINVAL;
     }
     if (tmp_old_dirname != tmp_new_dirname) {
-        logmsg("Can not move '", oldpath, "' to '", newpath, "'.\n");
+        LogError("can't move %s to %s", oldpath.c_str(), newpath.c_str());
         return -EINVAL;
     }
 
@@ -739,13 +725,13 @@ int MTPDevice::dirRename(const std::string &oldpath, const std::string &newpath)
     free(static_cast<void*>(folder->name));
     free(static_cast<void*>(folder));
     if (ret != 0) {
-        logmsg("Could not rename '", oldpath, "' to '",  tmp_new_basename, "'.\n");
+        LogError("can't rename %s to %s", oldpath.c_str(), tmp_new_basename.c_str());
         LIBMTP_Dump_Errorstack(m_device);
         LIBMTP_Clear_Errorstack(m_device);
         return -EINVAL;
     }
     const_cast<TypeDir*>(dir_to_rename)->setName(tmp_new_basename);
-    logmsg("Directory '", oldpath, "' renamed to '", tmp_new_basename, "'.\n");
+    LogInfo("move %s to %s", oldpath.c_str(), tmp_new_basename.c_str());
     return 0;
 }
 
@@ -776,8 +762,7 @@ int MTPDevice::rename(const std::string &oldpath, const std::string &newpath)
     const TypeDir *dir_to_rename = dir_old_parent ? dir_old_parent->dir(tmp_old_basename) : nullptr;
     const TypeFile *file_to_rename = dir_old_parent ? dir_old_parent->file(tmp_old_basename) : nullptr;
 
-    logmsg("dir_to_rename:    ", dir_to_rename, "\n");
-    logmsg("file_to_rename:   ", file_to_rename, "\n");
+    LogInfo("dir_to_rename:%x, file_to_rename:%x", dir_to_rename, file_to_rename);
 
     if (!dir_old_parent || !dir_new_parent || dir_old_parent->id() == 0)
         return -EINVAL;
@@ -786,11 +771,10 @@ int MTPDevice::rename(const std::string &oldpath, const std::string &newpath)
         static_cast<const TypeBasic*>(dir_to_rename) :
         static_cast<const TypeBasic*>(file_to_rename);
 
-    logmsg("object_to_rename: ", object_to_rename, "\n");
-    logmsg("object_to_rename->id(): ", object_to_rename->id(), "\n");
+    LogInfo("object_to_rename:%x, object_to_rename->id():%d", object_to_rename, object_to_rename->id());
 
     if (!object_to_rename) {
-        logmsg("No such file or directory to rename/move!\n");
+        LogError("No such file or directory to rename/move!");
         return -ENOENT;
     }
 
@@ -800,7 +784,7 @@ int MTPDevice::rename(const std::string &oldpath, const std::string &newpath)
             LIBMTP_PROPERTY_ParentObject, dir_new_parent->id());
         criticalLeave();
         if (rval != 0) {
-            logmsg("Could not move '", oldpath, "' to '", newpath, "'.\n");
+            LogError("can't move %s to %s", oldpath.c_str(), newpath.c_str());
             LIBMTP_Dump_Errorstack(m_device);
             LIBMTP_Clear_Errorstack(m_device);
             return -EINVAL;
@@ -813,7 +797,7 @@ int MTPDevice::rename(const std::string &oldpath, const std::string &newpath)
             LIBMTP_PROPERTY_Name, tmp_new_basename.c_str());
         criticalLeave();
         if (rval != 0) {
-            logmsg("Could not rename '", oldpath, "' to '", newpath, "'.\n");
+            LogError("can't move %s to %s", oldpath.c_str(), newpath.c_str());
             LIBMTP_Dump_Errorstack(m_device);
             LIBMTP_Clear_Errorstack(m_device);
             return -EINVAL;
@@ -834,12 +818,12 @@ int MTPDevice::filesplitPull(const std::string &src,const std::string &dst,uint3
    const TypeDir *dir_parent = dirFetchContentFromCache(src_dirname);
    const TypeFile *file_to_fetch = dir_parent ? dir_parent->file(src_basename) : nullptr;
    if (!dir_parent) {
-      logmsg("filesplitPull, dir_parent Can not fetch '", src, "'.\n");
+      LogInfo("dir_parent Can not fetch %s", src.c_str());
       isInCache = false;
    }
 
    if (!file_to_fetch) {
-      logmsg("filesplitPull, file_to_fetch No such file '", src, "'.\n");
+      LogInfo("file_to_fetch No such file %s", src.c_str());
       isInCache = false;
    }
 
@@ -856,17 +840,17 @@ int MTPDevice::filesplitPull(const std::string &src,const std::string &dst,uint3
       queryFileID(path, getUUID(), &fileId);
       if(!fileId)
       {
-         logmsg("queryFileID No such file '", src, "'.\n");
+         LogError("queryFileID No such file %s", src.c_str());
          return -EINVAL;
       }
    }
 
-   //logmsg(" read file: ", src, "\n");
+   LogDebug(" read file: %s", src.c_str());
 
    struct timeval startTime, endTime;
    unsigned long diffTime;
 
-   //logmsg(" enter LIBMTP_GetPartialObject, fileId: ", fileId, "\n");
+   LogDebug(" enter LIBMTP_GetPartialObject, fileId: %d", fileId);
    gettimeofday(&startTime, NULL);
    criticalEnter1();
    rval = LIBMTP_GetPartialObject(m_device,fileId,offset,size,&tmpbuf,&readlen);
@@ -875,13 +859,13 @@ int MTPDevice::filesplitPull(const std::string &src,const std::string &dst,uint3
    diffTime = (endTime.tv_sec - startTime.tv_sec);
    if(diffTime >= 2)
    {
-      logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", diffTIme: ", diffTime, ".\n");
-      logmsg(" read file: ", src, ", fileid: ", fileId, "\n");
+      LogDebug("fileId:%d, diffTime:%ld", fileId, diffTime);
    }
       
-   //logmsg(" exit LIBMTP_GetPartialObject, fileId: ", fileId, "\n");
+   LogDebug("exit LIBMTP_GetPartialObject, fileId: %d", fileId);
+
+   LogDebug("LIBMTP_GetPartialObject rval:%d, readlen:%d, size:%d", rval, readlen, size);
 
-   //logmsg("LIBMTP_GetPartialObject ", ",rval: ", rval, ",readlen: ", readlen, ", size: ", size, "\n");
    if(!rval && tmpbuf && (readlen <= size) && buf)
    {
       memcpy(buf,tmpbuf,readlen);
@@ -891,14 +875,14 @@ int MTPDevice::filesplitPull(const std::string &src,const std::string &dst,uint3
 
    //criticalLeave();
    if ((rval != 0) || (readlen > size)) {
-      logmsg("Could not fetch file '", src, "'.failed\n");
-      logmsg("LIBMTP_GetPartialObject ", ",rval: ", rval, ",readlen: ", readlen, ", size: ", size, "\n");
+      LogError("Could not fetch file:%s", src.c_str());
+      LogError("LIBMTP_GetPartialObject rval:%d, readlen:%d, size:%d", rval, readlen, size);
 
       LIBMTP_Dump_Errorstack(m_device);
       LIBMTP_Clear_Errorstack(m_device);
       return -EAGAIN;
    }
-   //logmsg("File fetched '", src, "'. ok\n");
+   LogDebug("File %s fetched ok", src.c_str());
    return readlen;
 }
 
@@ -909,30 +893,30 @@ int MTPDevice::filePull(const std::string &src, const std::string &dst)
     const TypeDir *dir_parent = dirFetchContentFromCache(src_dirname);
     const TypeFile *file_to_fetch = dir_parent ? dir_parent->file(src_basename) : nullptr;
     if (!dir_parent) {
-        logmsg("filePull, Can not fetch '", src, "'.\n");
+        LogError("filePull, Can not fetch %s", src.c_str());
         return -EINVAL;
     }
     if (!file_to_fetch) {
-        logmsg("filePull, No such file '", src, "'.\n");
+        LogError("filePull, no such file %s", src.c_str());
         return -ENOENT;
     }
     if (file_to_fetch->size() == 0) {
         int fd = ::creat(dst.c_str(), S_IRUSR | S_IWUSR);
         ::close(fd);
     } else {
-        logmsg("Started fetching '", src, "'.\n");
+        LogInfo("Started fetching %s", src.c_str());
         criticalEnter();
         int rval = LIBMTP_Get_File_To_File(m_device, file_to_fetch->id(),
             dst.c_str(), nullptr, nullptr);
         criticalLeave();
         if (rval != 0) {
-            logmsg("Could not fetch file '", src, "'.\n");
+            LogError("Could not fetch file %s", src.c_str());
             LIBMTP_Dump_Errorstack(m_device);
             LIBMTP_Clear_Errorstack(m_device);
             return -ENOENT;
         }
     }
-    logmsg("File fetched '", src, "'.\n");
+    LogInfo("File %s Fetched", src.c_str());
     return 0;
 }
 
@@ -947,7 +931,7 @@ int MTPDevice::filePush(const std::string &src, const std::string &dst)
         int rval = LIBMTP_Delete_Object(m_device, file_to_remove->id());
         criticalLeave();
         if (rval != 0) {
-            logmsg("Can not upload '", src, "' to '", dst, "'.\n");
+            LogError("Can not upload %s to %s", src.c_str(), dst.c_str());
             return -EINVAL;
         }
     }
@@ -957,13 +941,14 @@ int MTPDevice::filePush(const std::string &src, const std::string &dst)
     TypeFile file_to_upload(0, dir_parent->id(), dir_parent->storageid(),
         dst_basename, static_cast<uint64_t>(file_stat.st_size), 0);
     LIBMTP_file_t *f = file_to_upload.toLIBMTPFile();
-    if (file_stat.st_size)
-        logmsg("Started uploading '", dst, "'.\n");
+    if (file_stat.st_size) {
+        LogInfo("Started uploading %s", dst.c_str());
+    }
     criticalEnter();
     int rval = LIBMTP_Send_File_From_File(m_device, src.c_str(), f, nullptr, nullptr);
     criticalLeave();
     if (rval != 0) {
-        logmsg("Could not upload file '", src, "'.\n");
+        LogError("Could not upload file %s", src.c_str());
         LIBMTP_Dump_Errorstack(m_device);
         LIBMTP_Clear_Errorstack(m_device);
         rval = -EINVAL;
@@ -980,7 +965,7 @@ int MTPDevice::filePush(const std::string &src, const std::string &dst)
     }
     free(static_cast<void*>(f->filename));
     free(static_cast<void*>(f));
-    logmsg("File '", dst, (file_stat.st_size ? " uploaded" : " created"), ".\n");
+    LogInfo("File %s been %s", dst.c_str(), (file_stat.st_size ? " uploaded" : " created"));
     return rval;
 }
 
@@ -991,18 +976,18 @@ int MTPDevice::fileRemove(const std::string &path)
     const TypeDir *dir_parent = dirFetchContentFromCache(tmp_dirname);
     const TypeFile *file_to_remove = dir_parent ? dir_parent->file(tmp_basename) : nullptr;
     if (!dir_parent || !file_to_remove) {
-        logmsg("No such file '", path, "' to remove.\n");
+        LogError("No such file '%s' to remove", path.c_str());
         return -ENOENT;
     }
     criticalEnter();
     int rval = LIBMTP_Delete_Object(m_device, file_to_remove->id());
     criticalLeave();
     if (rval != 0) {
-        logmsg("Could not remove the directory '", path, "'.\n");
+        LogError("Could not remove the directory '%s'", path.c_str());
         return -EINVAL;
     }
     const_cast<TypeDir*>(dir_parent)->removeFile(*file_to_remove);
-    logmsg("File '", path, "' removed.\n");
+    LogInfo("File '%s' removed", path.c_str());
     return 0;
 }
 
@@ -1015,7 +1000,7 @@ int MTPDevice::fileRename(const std::string &oldpath, const std::string &newpath
     const TypeDir *dir_parent = dirFetchContentFromCache(tmp_old_dirname);
     const TypeFile *file_to_rename = dir_parent ? dir_parent->file(tmp_old_basename) : nullptr;
     if (!dir_parent || !file_to_rename || tmp_old_dirname != tmp_new_dirname) {
-        logmsg("Can not rename '", oldpath, "' to '", tmp_new_basename, "'.\n");
+        LogError("Can not rename %s to %s", oldpath.c_str(), tmp_new_basename.c_str());
         return -EINVAL;
     }
 
@@ -1026,13 +1011,13 @@ int MTPDevice::fileRename(const std::string &oldpath, const std::string &newpath
     free(static_cast<void*>(file->filename));
     free(static_cast<void*>(file));
     if (rval > 0) {
-        logmsg("Could not rename '", oldpath, "' to '", newpath, "'.\n");
+        LogError("Can not rename %s to %s", oldpath.c_str(), newpath.c_str());
         LIBMTP_Dump_Errorstack(m_device);
         LIBMTP_Clear_Errorstack(m_device);
         return -EINVAL;
     }
     const_cast<TypeFile*>(file_to_rename)->setName(tmp_new_basename);
-    logmsg("File '", oldpath, "' renamed to '", tmp_new_basename, "'.\n");
+    LogError("File %s renamed to %s", oldpath.c_str(), tmp_new_basename.c_str());
     return 0;
 }
 
@@ -1131,7 +1116,7 @@ int32_t MTPDevice::getFileInfoById(uint32_t id, struct stat *st)
 {
    if(st == NULL)
    {
-      logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", st is NULL\n");
+      LogError("st is NULL");
       return -1;
    }
 
@@ -1140,7 +1125,7 @@ int32_t MTPDevice::getFileInfoById(uint32_t id, struct stat *st)
    criticalLeave1();
    if(file == NULL)
    {
-      logmsg("  fun: ", __FUNCTION__, ", id: ", id, ", file is NULL, fake it\n");
+      LogInfo("id:%d file is NULL, fake it", id);
       st->st_ino = id;
       st->st_size = 1024;
       st->st_blocks = 1;
diff --git a/src/simple-mtpfs-util.cpp b/src/simple-mtpfs-util.cpp
index 0b17bce..2827ed8 100755
--- a/src/simple-mtpfs-util.cpp
+++ b/src/simple-mtpfs-util.cpp
@@ -49,6 +49,9 @@ int StreamHelper::s_stderr = -1;
 
 void StreamHelper::on()
 {
+    if (Logger::isEnableLibmtpLog())
+        return;
+
     if (!s_enabled)
         return;
 
@@ -66,6 +69,9 @@ void StreamHelper::on()
 
 void StreamHelper::off()
 {
+    if (Logger::isEnableLibmtpLog())
+        return;
+
     if (s_enabled)
         return;
 
@@ -295,7 +301,7 @@ int GetCoCPath(const char *inPath, COCMediaPathInfo *outPath)
 {
     if(!inPath || !outPath)
     {
-       logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", invaild paraments", "\n");
+       LogError("invalid parameters");
        return -1;
     }
     
@@ -316,7 +322,7 @@ int GetCoCPath(const char *inPath, COCMediaPathInfo *outPath)
     path = (char *)calloc(1, len+1);
     if(path == NULL)
     {
-       logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ",calloc failed", "\n");
+       LogError("calloc failed");
        return -1;
     }
 
@@ -325,7 +331,7 @@ int GetCoCPath(const char *inPath, COCMediaPathInfo *outPath)
     //fill path
     outPath->path = path;
 
-    //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", path: ", outPath->path,  "\n");
+    LogInfo("path:%s", outPath->path);
 
     //fill media type
     if(pos && (strstr((char *)pos, COCMEDIATYPEAUDIO) != NULL))
@@ -338,26 +344,25 @@ int GetCoCPath(const char *inPath, COCMediaPathInfo *outPath)
        outPath->MediaType |= MEDIATYPEVIDEO;
     }
     
-    //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", mediaType: ", outPath->MediaType,  "\n");
+    LogInfo("mediaType:%d", outPath->MediaType);
 
     //fill media count
     if(pos)
     {
       char *posCnt = strrchr(pos, '_');
 
-      //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", posCnt: ", posCnt, "\n");
-      //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", posCnt+1: ", posCnt+1, "\n");
+      LogDebug("posCnt:%d", posCnt);
 
       if(posCnt)
       {
-         if((int)(posCnt+1-inPath) <= strlen(inPath))
+         if((unsigned)(posCnt+1-inPath) <= strlen(inPath))
          {
             outPath->MediaCnt = atoi(posCnt+1);
          }
       }
     }
 
-    //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", MediaCnt: ", outPath->MediaCnt,  "\n");
+    LogDebug("Mediacnt:%d", outPath->MediaCnt);
 
     return 0;
 }
@@ -444,7 +449,7 @@ bool isMediaType(const char *fileName)
 
    if(fileName == NULL)
    {
-      logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", fileName is NULL\n");
+      LogError("file name is NULL");
       return false;
    }
