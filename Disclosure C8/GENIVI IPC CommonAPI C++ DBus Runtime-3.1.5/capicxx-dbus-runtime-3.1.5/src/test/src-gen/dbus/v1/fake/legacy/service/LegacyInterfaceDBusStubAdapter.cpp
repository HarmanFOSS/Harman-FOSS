/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201512091037.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/fake/legacy/service/LegacyInterface.hpp>
#include <v1/fake/legacy/service/LegacyInterfaceDBusStubAdapter.hpp>

namespace v1 {
namespace fake {
namespace legacy {
namespace service {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createLegacyInterfaceDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<LegacyInterfaceDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerLegacyInterfaceDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	LegacyInterface::getInterface(), &createLegacyInterfaceDBusStubAdapter);
}

LegacyInterfaceDBusStubAdapterInternal::~LegacyInterfaceDBusStubAdapterInternal() {
    deactivateManagedInstances();
    LegacyInterfaceDBusStubAdapterHelper::deinit();
}

void LegacyInterfaceDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* LegacyInterfaceDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"TestMethod\">\n"
            "<arg name=\"_input\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_val1\" type=\"i\" direction=\"out\" />\n"
            "<arg name=\"_val2\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"OtherTestMethod\">\n"
            "<arg name=\"_greeting\" type=\"s\" direction=\"out\" />\n"
            "<arg name=\"_identifier\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"finish\">\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::fake::legacy::service::LegacyInterfaceStub,
        CommonAPI::Version
        > LegacyInterfaceDBusStubAdapterInternal::getLegacyInterfaceInterfaceVersionStubDispatcher(&LegacyInterfaceStub::getInterfaceVersion, "uu");




CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::fake::legacy::service::LegacyInterfaceStub,
    std::tuple<int32_t>,
    std::tuple<int32_t, int32_t>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > LegacyInterfaceDBusStubAdapterInternal::testMethodStubDispatcher(
    &LegacyInterfaceStub::TestMethod, "ii",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::fake::legacy::service::LegacyInterfaceStub,
    std::tuple<>,
    std::tuple<std::string, int32_t>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>
    
    > LegacyInterfaceDBusStubAdapterInternal::otherTestMethodStubDispatcher(
    &LegacyInterfaceStub::OtherTestMethod, "si",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::fake::legacy::service::LegacyInterfaceStub,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>
    
    > LegacyInterfaceDBusStubAdapterInternal::finishStubDispatcher(
    &LegacyInterfaceStub::finish, "",
					std::make_tuple(),
                	std::make_tuple());





const LegacyInterfaceDBusStubAdapterHelper::StubDispatcherTable& LegacyInterfaceDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& LegacyInterfaceDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

LegacyInterfaceDBusStubAdapterInternal::LegacyInterfaceDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      LegacyInterfaceDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<LegacyInterfaceStub>(_stub), false),
      stubDispatcherTable_({
            { { "TestMethod", "i" }, &fake::legacy::service::LegacyInterfaceDBusStubAdapterInternal::testMethodStubDispatcher },
            { { "OtherTestMethod", "" }, &fake::legacy::service::LegacyInterfaceDBusStubAdapterInternal::otherTestMethodStubDispatcher },
            { { "finish", "" }, &fake::legacy::service::LegacyInterfaceDBusStubAdapterInternal::finishStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &fake::legacy::service::LegacyInterfaceDBusStubAdapterInternal::getLegacyInterfaceInterfaceVersionStubDispatcher });
}

bool LegacyInterfaceDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace service
} // namespace legacy
} // namespace fake
} // namespace v1
