/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201512091037.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/fake/legacy/service/LegacyInterfaceNoObjectManagerDBusProxy.hpp>

namespace v1 {
namespace fake {
namespace legacy {
namespace service {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createLegacyInterfaceNoObjectManagerDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<LegacyInterfaceNoObjectManagerDBusProxy>(_address, _connection);
}

INITIALIZER(registerLegacyInterfaceNoObjectManagerDBusProxy) {
     CommonAPI::DBus::DBusAddressTranslator::get()->insert(
         "local:fake.legacy.service.LegacyInterfaceNoObjectManager:fake.legacy.service.LegacyInterfaceNoObjectManager",
         "",
         "",
         "");
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		LegacyInterfaceNoObjectManager::getInterface(),
		&createLegacyInterfaceNoObjectManagerDBusProxy);
}

LegacyInterfaceNoObjectManagerDBusProxy::LegacyInterfaceNoObjectManagerDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection),
		LegacyInterfaceDBusProxy(_address, _connection)
{
    CommonAPI::DBus::DBusServiceRegistry::get(_connection)->setDBusServicePredefined(_address.getService());
}


    


void LegacyInterfaceNoObjectManagerDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace service
      } // namespace legacy
      } // namespace fake
      } // namespace v1
