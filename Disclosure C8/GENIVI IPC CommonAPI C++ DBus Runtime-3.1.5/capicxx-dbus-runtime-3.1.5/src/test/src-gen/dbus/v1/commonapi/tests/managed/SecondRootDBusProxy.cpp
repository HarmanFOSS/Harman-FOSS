/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201512091037.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/commonapi/tests/managed/SecondRootDBusProxy.hpp>

namespace v1 {
namespace commonapi {
namespace tests {
namespace managed {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createSecondRootDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<SecondRootDBusProxy>(_address, _connection);
}

INITIALIZER(registerSecondRootDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		SecondRoot::getInterface(),
		&createSecondRootDBusProxy);
}

SecondRootDBusProxy::SecondRootDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		proxyManagerLeafInterface_(*this, "commonapi.tests.managed.LeafInterface")
{
}


    

CommonAPI::ProxyManager& SecondRootDBusProxy::getProxyManagerLeafInterface() {
return proxyManagerLeafInterface_;
      }

void SecondRootDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace managed
      } // namespace tests
      } // namespace commonapi
      } // namespace v1
