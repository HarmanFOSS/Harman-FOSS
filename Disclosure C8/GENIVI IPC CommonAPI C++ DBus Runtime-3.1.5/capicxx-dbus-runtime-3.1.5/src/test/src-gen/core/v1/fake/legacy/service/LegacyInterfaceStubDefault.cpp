/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201512091035.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/fake/legacy/service/LegacyInterfaceStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace fake {
namespace legacy {
namespace service {

LegacyInterfaceStubDefault::LegacyInterfaceStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(LegacyInterface::getInterfaceVersion()) {
}

const CommonAPI::Version& LegacyInterfaceStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

LegacyInterfaceStubRemoteEvent* LegacyInterfaceStubDefault::initStubAdapter(const std::shared_ptr<LegacyInterfaceStubAdapter> &_adapter) {
    CommonAPI::Stub<LegacyInterfaceStubAdapter, LegacyInterfaceStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}


void LegacyInterfaceStubDefault::TestMethod(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _input, TestMethodReply_t _reply) {
    (void)_client;
    (void) _input;
    int32_t val1 = 0;
    int32_t val2 = 0;
    _reply(val1, val2);
}

void LegacyInterfaceStubDefault::OtherTestMethod(const std::shared_ptr<CommonAPI::ClientId> _client, OtherTestMethodReply_t _reply) {
    (void)_client;
    std::string greeting = "";
    int32_t identifier = 0;
    _reply(greeting, identifier);
}

void LegacyInterfaceStubDefault::finish(const std::shared_ptr<CommonAPI::ClientId> _client, finishReply_t _reply) {
    (void)_client;
    _reply();
}




LegacyInterfaceStubDefault::RemoteEventHandler::RemoteEventHandler(LegacyInterfaceStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace service
} // namespace legacy
} // namespace fake
} // namespace v1
