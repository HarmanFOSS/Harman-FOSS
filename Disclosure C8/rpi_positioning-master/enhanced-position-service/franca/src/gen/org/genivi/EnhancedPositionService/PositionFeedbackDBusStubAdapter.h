/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * PositionFeedback = This interface allows the application implementing the
 *  map-matching algorithm to provide a position feedback to the
 *  EnahncedPositionService
 */
#ifndef ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Position_Feedback_DBUS_STUB_ADAPTER_H_
#define ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Position_Feedback_DBUS_STUB_ADAPTER_H_

#include <org/genivi/EnhancedPositionService/PositionFeedbackStub.h>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusStubAdapterHelper.h>
#include <CommonAPI/DBus/DBusStubAdapter.h>
#include <CommonAPI/DBus/DBusFactory.h>
#include <CommonAPI/DBus/DBusServicePublisher.h>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace EnhancedPositionService {

typedef CommonAPI::DBus::DBusStubAdapterHelper<PositionFeedbackStub> PositionFeedbackDBusStubAdapterHelper;

class PositionFeedbackDBusStubAdapterInternal: public virtual PositionFeedbackStubAdapter, public PositionFeedbackDBusStubAdapterHelper {
 public:
    PositionFeedbackDBusStubAdapterInternal(
            const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
            const std::string& commonApiAddress,
            const std::string& dbusInterfaceName,
            const std::string& dbusBusName,
            const std::string& dbusObjectPath,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
            const std::shared_ptr<CommonAPI::StubBase>& stub);

    ~PositionFeedbackDBusStubAdapterInternal();

    virtual const bool hasFreedesktopProperties();




    const PositionFeedbackDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();


static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        PositionFeedbackStub,
        CommonAPI::Version
        > getPositionFeedbackInterfaceVersionStubDispatcher;



/**
 * GetVersion = This method returns the API version implemented by the server
 *  application
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    PositionFeedbackStub,
    std::tuple<>,
    std::tuple<EnhancedPositionServiceTypes::Version>
    > getVersionStubDispatcher;
/**
 * SetPositionFeedback = This method allows a client application to provide the
 *  EnhancedPositionService with a position feedback
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    PositionFeedbackStub,
    std::tuple<PositionFeedback::PositionFeedbackInfo, uint64_t, EnhancedPositionServiceTypes::PositionFeedbackType>,
    std::tuple<>
    > setPositionFeedbackStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    PositionFeedbackDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class PositionFeedbackDBusStubAdapter: public PositionFeedbackDBusStubAdapterInternal, public std::enable_shared_from_this<PositionFeedbackDBusStubAdapter> {
public:
    PositionFeedbackDBusStubAdapter(
                         const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                         const std::string& commonApiAddress,
                         const std::string& dbusInterfaceName,
                         const std::string& dbusBusName,
                         const std::string& dbusObjectPath,
                         const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
                         const std::shared_ptr<CommonAPI::StubBase>& stub) :
            CommonAPI::DBus::DBusStubAdapter(
                            factory,
                            commonApiAddress,
                            dbusInterfaceName,
                            dbusBusName,
                            dbusObjectPath,
                            dbusConnection,
                            false),
            PositionFeedbackDBusStubAdapterInternal(
                            factory,
                            commonApiAddress,
                            dbusInterfaceName,
                            dbusBusName,
                            dbusObjectPath,
                            dbusConnection,
                            stub) { }
};

} // namespace EnhancedPositionService
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Position_Feedback_DBUS_STUB_ADAPTER_H_
