/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include "ConfigurationDBusStubAdapter.h"
#include <org/genivi/EnhancedPositionService/Configuration.h>

namespace org {
namespace genivi {
namespace EnhancedPositionService {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createConfigurationDBusStubAdapter(
                   const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                   const std::string& commonApiAddress,
                   const std::string& interfaceName,
                   const std::string& busName,
                   const std::string& objectPath,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection,
                   const std::shared_ptr<CommonAPI::StubBase>& stubBase) {
    return std::make_shared<ConfigurationDBusStubAdapter>(factory, commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection, stubBase);
}

INITIALIZER(registerConfigurationDBusStubAdapter) {
    CommonAPI::DBus::DBusFactory::registerAdapterFactoryMethod(Configuration::getInterfaceId(),
                                                               &createConfigurationDBusStubAdapter);
}



ConfigurationDBusStubAdapterInternal::~ConfigurationDBusStubAdapterInternal() {
    deactivateManagedInstances();
    ConfigurationDBusStubAdapterHelper::deinit();
}

void ConfigurationDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* ConfigurationDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"getSatSystemAttribute\">\n"
            "<arg name=\"value\" type=\"i\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"setSatSystemAttribute\">\n"
            "<arg name=\"requestedValue\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"setValue\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<signal name=\"onSatSystemAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"i\" />\n"
        "</signal>\n"
        "<method name=\"getUpdateIntervalAttribute\">\n"
            "<arg name=\"value\" type=\"i\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"setUpdateIntervalAttribute\">\n"
            "<arg name=\"requestedValue\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"setValue\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<signal name=\"onUpdateIntervalAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"i\" />\n"
        "</signal>\n"
        /**
         * GetVersion = This method returns the API version implemented by the server
         *  application
         */
        "<method name=\"GetVersion\">\n"
            "<arg name=\"version\" type=\"(qqqs)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * GetSupportedSatelliteSystems = This method returns a list of supported
         *  satellite systems
         */
        "<method name=\"GetSupportedSatelliteSystems\">\n"
            "<arg name=\"satelliteSystems\" type=\"ai\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ConfigurationStub,
        CommonAPI::Version
        > ConfigurationDBusStubAdapterInternal::getConfigurationInterfaceVersionStubDispatcher(&ConfigurationStub::getInterfaceVersion, "uu");

/**
 * SatSystem = satellite system (GPS, GLONASS, ...)
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ConfigurationStub,
        EnhancedPositionServiceTypes::SatelliteSystem
        > ConfigurationDBusStubAdapterInternal::getSatSystemAttributeStubDispatcher(&ConfigurationStub::getSatSystemAttribute, "i");
CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ConfigurationStub,
        EnhancedPositionServiceTypes::SatelliteSystem
        > ConfigurationDBusStubAdapterInternal::setSatSystemAttributeStubDispatcher(
                &ConfigurationStub::getSatSystemAttribute,
                &ConfigurationStubRemoteEvent::onRemoteSetSatSystemAttribute,
                &ConfigurationStubRemoteEvent::onRemoteSatSystemAttributeChanged
                ,&ConfigurationStubAdapter::fireSatSystemAttributeChanged
                ,"i"
                );
/**
 * UpdateInterval = update interval
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ConfigurationStub,
        int32_t
        > ConfigurationDBusStubAdapterInternal::getUpdateIntervalAttributeStubDispatcher(&ConfigurationStub::getUpdateIntervalAttribute, "i");
CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ConfigurationStub,
        int32_t
        > ConfigurationDBusStubAdapterInternal::setUpdateIntervalAttributeStubDispatcher(
                &ConfigurationStub::getUpdateIntervalAttribute,
                &ConfigurationStubRemoteEvent::onRemoteSetUpdateIntervalAttribute,
                &ConfigurationStubRemoteEvent::onRemoteUpdateIntervalAttributeChanged
                ,&ConfigurationStubAdapter::fireUpdateIntervalAttributeChanged
                ,"i"
                );


/**
 * GetVersion = This method returns the API version implemented by the server
 *  application
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ConfigurationStub,
    std::tuple<>,
    std::tuple<EnhancedPositionServiceTypes::Version>
    > ConfigurationDBusStubAdapterInternal::getVersionStubDispatcher(&ConfigurationStub::GetVersion, "(qqqs)");
/**
 * GetSupportedSatelliteSystems = This method returns a list of supported
 *  satellite systems
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ConfigurationStub,
    std::tuple<>,
    std::tuple<std::vector<EnhancedPositionServiceTypes::SatelliteSystem>>
    > ConfigurationDBusStubAdapterInternal::getSupportedSatelliteSystemsStubDispatcher(&ConfigurationStub::GetSupportedSatelliteSystems, "ai");


/**
 * SatSystem = satellite system (GPS, GLONASS, ...)
 */
void ConfigurationDBusStubAdapterInternal::fireSatSystemAttributeChanged(const EnhancedPositionServiceTypes::SatelliteSystem& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<EnhancedPositionServiceTypes::SatelliteSystem>>
        ::sendSignal(
            *this,
            "onSatSystemAttributeChanged",
            "i",
            value
    );
}
/**
 * UpdateInterval = update interval
 */
void ConfigurationDBusStubAdapterInternal::fireUpdateIntervalAttributeChanged(const int32_t& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<int32_t>>
        ::sendSignal(
            *this,
            "onUpdateIntervalAttributeChanged",
            "i",
            value
    );
}



const ConfigurationDBusStubAdapterHelper::StubDispatcherTable& ConfigurationDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& ConfigurationDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

ConfigurationDBusStubAdapterInternal::ConfigurationDBusStubAdapterInternal(
        const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
        const std::string& commonApiAddress,
        const std::string& dbusInterfaceName,
        const std::string& dbusBusName,
        const std::string& dbusObjectPath,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
        const std::shared_ptr<CommonAPI::StubBase>& stub):
        CommonAPI::DBus::DBusStubAdapter(
                factory,
                commonApiAddress,
                dbusInterfaceName,
                dbusBusName,
                dbusObjectPath,
                dbusConnection,
                false),
        ConfigurationDBusStubAdapterHelper(
            factory,
            commonApiAddress,
            dbusInterfaceName,
            dbusBusName,
            dbusObjectPath,
            dbusConnection,
            std::dynamic_pointer_cast<ConfigurationStub>(stub),
            false),
        stubDispatcherTable_({
            /**
             * SatSystem = satellite system (GPS, GLONASS, ...)
             */
            { { "getSatSystemAttribute", "" }, &org::genivi::EnhancedPositionService::ConfigurationDBusStubAdapterInternal::getSatSystemAttributeStubDispatcher }
            , { { "setSatSystemAttribute", "i" }, &org::genivi::EnhancedPositionService::ConfigurationDBusStubAdapterInternal::setSatSystemAttributeStubDispatcher },
            /**
             * UpdateInterval = update interval
             */
            { { "getUpdateIntervalAttribute", "" }, &org::genivi::EnhancedPositionService::ConfigurationDBusStubAdapterInternal::getUpdateIntervalAttributeStubDispatcher }
            , { { "setUpdateIntervalAttribute", "i" }, &org::genivi::EnhancedPositionService::ConfigurationDBusStubAdapterInternal::setUpdateIntervalAttributeStubDispatcher }
            ,
            /**
             * GetVersion = This method returns the API version implemented by the server
             *  application
             */
            { { "GetVersion", "" }, &org::genivi::EnhancedPositionService::ConfigurationDBusStubAdapterInternal::getVersionStubDispatcher },
            /**
             * GetSupportedSatelliteSystems = This method returns a list of supported
             *  satellite systems
             */
            { { "GetSupportedSatelliteSystems", "" }, &org::genivi::EnhancedPositionService::ConfigurationDBusStubAdapterInternal::getSupportedSatelliteSystemsStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &org::genivi::EnhancedPositionService::ConfigurationDBusStubAdapterInternal::getConfigurationInterfaceVersionStubDispatcher });
}

const bool ConfigurationDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace EnhancedPositionService
} // namespace genivi
} // namespace org
