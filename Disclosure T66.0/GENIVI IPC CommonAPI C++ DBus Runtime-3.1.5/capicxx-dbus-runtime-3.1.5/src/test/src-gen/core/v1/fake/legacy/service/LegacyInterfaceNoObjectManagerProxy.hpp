/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201512091035.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_FAKE_LEGACY_SERVICE_Legacy_Interface_No_Object_Manager_PROXY_HPP_
#define V1_FAKE_LEGACY_SERVICE_Legacy_Interface_No_Object_Manager_PROXY_HPP_

#include <v1/fake/legacy/service/LegacyInterfaceNoObjectManagerProxyBase.hpp>

#include "v1/fake/legacy/service/LegacyInterfaceProxy.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace fake {
namespace legacy {
namespace service {

template <typename ... _AttributeExtensions>
class LegacyInterfaceNoObjectManagerProxy
    : virtual public LegacyInterfaceNoObjectManager, 
      virtual public LegacyInterfaceNoObjectManagerProxyBase,
      public LegacyInterfaceProxy<_AttributeExtensions...>,
      virtual public _AttributeExtensions... {
public:
    LegacyInterfaceNoObjectManagerProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~LegacyInterfaceNoObjectManagerProxy();

    typedef LegacyInterfaceNoObjectManager InterfaceType;

    inline static const char* getInterface() {
        return(LegacyInterfaceNoObjectManager::getInterface());
    }





    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<LegacyInterfaceNoObjectManagerProxyBase> delegate_;
};

typedef LegacyInterfaceNoObjectManagerProxy<> LegacyInterfaceNoObjectManagerProxyDefault;


//
// LegacyInterfaceNoObjectManagerProxy Implementation
//
template <typename ... _AttributeExtensions>
LegacyInterfaceNoObjectManagerProxy<_AttributeExtensions...>::LegacyInterfaceNoObjectManagerProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        ::v1::fake::legacy::service::LegacyInterfaceProxy<_AttributeExtensions...>(delegate),
        _AttributeExtensions(*(std::dynamic_pointer_cast<LegacyInterfaceNoObjectManagerProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<LegacyInterfaceNoObjectManagerProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
LegacyInterfaceNoObjectManagerProxy<_AttributeExtensions...>::~LegacyInterfaceNoObjectManagerProxy() {
}


template <typename ... _AttributeExtensions>
const CommonAPI::Address &LegacyInterfaceNoObjectManagerProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool LegacyInterfaceNoObjectManagerProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool LegacyInterfaceNoObjectManagerProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& LegacyInterfaceNoObjectManagerProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& LegacyInterfaceNoObjectManagerProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace service
} // namespace legacy
} // namespace fake
} // namespace v1



// Compatibility
namespace v1_0 = v1;

#endif // V1_FAKE_LEGACY_SERVICE_Legacy_Interface_No_Object_Manager_PROXY_HPP_
