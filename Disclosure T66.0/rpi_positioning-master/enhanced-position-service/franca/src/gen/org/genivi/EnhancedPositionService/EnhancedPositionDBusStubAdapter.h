/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * EnhancedPosition = This interface offers functionalities to retrieve the
 *  enhanced position of the vehicle
 */
#ifndef ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Enhanced_Position_DBUS_STUB_ADAPTER_H_
#define ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Enhanced_Position_DBUS_STUB_ADAPTER_H_

#include <org/genivi/EnhancedPositionService/EnhancedPositionStub.h>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusStubAdapterHelper.h>
#include <CommonAPI/DBus/DBusStubAdapter.h>
#include <CommonAPI/DBus/DBusFactory.h>
#include <CommonAPI/DBus/DBusServicePublisher.h>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace EnhancedPositionService {

typedef CommonAPI::DBus::DBusStubAdapterHelper<EnhancedPositionStub> EnhancedPositionDBusStubAdapterHelper;

class EnhancedPositionDBusStubAdapterInternal: public virtual EnhancedPositionStubAdapter, public EnhancedPositionDBusStubAdapterHelper {
 public:
    EnhancedPositionDBusStubAdapterInternal(
            const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
            const std::string& commonApiAddress,
            const std::string& dbusInterfaceName,
            const std::string& dbusBusName,
            const std::string& dbusObjectPath,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
            const std::shared_ptr<CommonAPI::StubBase>& stub);

    ~EnhancedPositionDBusStubAdapterInternal();

    virtual const bool hasFreedesktopProperties();


    /**
     * PositionUpdate = This signal is called to notify a client application of a
     *  position change. The update frequency is implementation specific. The maximal
     *  allowed frequency is 10Hz
     */
    void firePositionUpdateEvent(const EnhancedPositionServiceTypes::Bitmask& changedValues);


    const EnhancedPositionDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();


static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        EnhancedPositionStub,
        CommonAPI::Version
        > getEnhancedPositionInterfaceVersionStubDispatcher;



/**
 * GetVersion = This method returns the API version implemented by the server
 *  application
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    EnhancedPositionStub,
    std::tuple<>,
    std::tuple<EnhancedPositionServiceTypes::Version>
    > getVersionStubDispatcher;
/**
 * GetPositionInfo = This method returns a given set of positioning data (e.g.
 *  Position, Course, Accuracy, Status, ... )
           Note: If a requested
 *  value is invalid, it's not returned to the client application
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    EnhancedPositionStub,
    std::tuple<EnhancedPositionServiceTypes::Bitmask>,
    std::tuple<EnhancedPositionServiceTypes::Timestamp, EnhancedPositionServiceTypes::PositionInfo>
    > getPositionInfoStubDispatcher;
/**
 * GetSatelliteInfo = This method returns information about the current satellite
 *  constellation
        Note: If a requested value is invalid, it's not
 *  returned to the client application
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    EnhancedPositionStub,
    std::tuple<>,
    std::tuple<EnhancedPositionServiceTypes::Timestamp, EnhancedPositionServiceTypes::SatelliteInfo>
    > getSatelliteInfoStubDispatcher;
/**
 * GetTime = This method returns UTC time and date.
            Note: If a
 *  requested value is invalid, it's not returned to the client application
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    EnhancedPositionStub,
    std::tuple<>,
    std::tuple<EnhancedPositionServiceTypes::Timestamp, EnhancedPositionServiceTypes::TimeInfo>
    > getTimeStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    EnhancedPositionDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class EnhancedPositionDBusStubAdapter: public EnhancedPositionDBusStubAdapterInternal, public std::enable_shared_from_this<EnhancedPositionDBusStubAdapter> {
public:
    EnhancedPositionDBusStubAdapter(
                         const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                         const std::string& commonApiAddress,
                         const std::string& dbusInterfaceName,
                         const std::string& dbusBusName,
                         const std::string& dbusObjectPath,
                         const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
                         const std::shared_ptr<CommonAPI::StubBase>& stub) :
            CommonAPI::DBus::DBusStubAdapter(
                            factory,
                            commonApiAddress,
                            dbusInterfaceName,
                            dbusBusName,
                            dbusObjectPath,
                            dbusConnection,
                            false),
            EnhancedPositionDBusStubAdapterInternal(
                            factory,
                            commonApiAddress,
                            dbusInterfaceName,
                            dbusBusName,
                            dbusObjectPath,
                            dbusConnection,
                            stub) { }
};

} // namespace EnhancedPositionService
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Enhanced_Position_DBUS_STUB_ADAPTER_H_
