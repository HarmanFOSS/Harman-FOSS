/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * Configuration = This interface allows a client application to set and retrieve
 *  configuration options
 */
#ifndef ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Configuration_STUB_H_
#define ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Configuration_STUB_H_



#include <org/genivi/EnhancedPositionService/EnhancedPositionServiceTypes.h>

#include "Configuration.h"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.h>
#include <CommonAPI/OutputStream.h>
#include <CommonAPI/SerializableStruct.h>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Stub.h>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace EnhancedPositionService {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service Configuration. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class ConfigurationStubAdapter: virtual public CommonAPI::StubAdapter, public Configuration {
 public:
    ///Notifies all remote listeners about a change of value of the attribute SatSystem.
    virtual void fireSatSystemAttributeChanged(const EnhancedPositionServiceTypes::SatelliteSystem& SatSystem) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UpdateInterval.
    virtual void fireUpdateIntervalAttributeChanged(const int32_t& UpdateInterval) = 0;



    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};


/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for Configuration.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ConfigurationStubRemoteEvent {
 public:
    virtual ~ConfigurationStubRemoteEvent() { }

    /// Verification callback for remote set requests on the attribute SatSystem
    virtual bool onRemoteSetSatSystemAttribute(const std::shared_ptr<CommonAPI::ClientId> clientId, EnhancedPositionServiceTypes::SatelliteSystem SatSystem) = 0;
    /// Action callback for remote set requests on the attribute SatSystem
    virtual void onRemoteSatSystemAttributeChanged() = 0;

    /// Verification callback for remote set requests on the attribute UpdateInterval
    virtual bool onRemoteSetUpdateIntervalAttribute(const std::shared_ptr<CommonAPI::ClientId> clientId, int32_t UpdateInterval) = 0;
    /// Action callback for remote set requests on the attribute UpdateInterval
    virtual void onRemoteUpdateIntervalAttributeChanged() = 0;

};


/**
 * Defines the interface that must be implemented by any class that should provide
 * the service Configuration to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ConfigurationStub: public virtual CommonAPI::Stub<ConfigurationStubAdapter, ConfigurationStubRemoteEvent> {
public:
    virtual ~ConfigurationStub() { }
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /**
     * SatSystem = satellite system (GPS, GLONASS, ...)
     */
    /// Provides getter access to the attribute SatSystem
    virtual const EnhancedPositionServiceTypes::SatelliteSystem& getSatSystemAttribute(const std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    /**
     * UpdateInterval = update interval
     */
    /// Provides getter access to the attribute UpdateInterval
    virtual const int32_t& getUpdateIntervalAttribute(const std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /**
     * GetVersion = This method returns the API version implemented by the server
     *  application
     */
    /// This is the method that will be called on remote calls on the method GetVersion.
    virtual void GetVersion(const std::shared_ptr<CommonAPI::ClientId> clientId, EnhancedPositionServiceTypes::Version& version) = 0;
    /**
     * GetSupportedSatelliteSystems = This method returns a list of supported
     *  satellite systems
     */
    /// This is the method that will be called on remote calls on the method GetSupportedSatelliteSystems.
    virtual void GetSupportedSatelliteSystems(const std::shared_ptr<CommonAPI::ClientId> clientId, std::vector<EnhancedPositionServiceTypes::SatelliteSystem>& satelliteSystems) = 0;

    using CommonAPI::Stub<ConfigurationStubAdapter, ConfigurationStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<ConfigurationStubAdapter, ConfigurationStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<ConfigurationStubAdapter, ConfigurationStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef ConfigurationStubRemoteEvent RemoteEventType;
    typedef Configuration StubInterface;
};

} // namespace EnhancedPositionService
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Configuration_STUB_H_
