/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * PositionFeedback = This interface allows the application implementing the
 *  map-matching algorithm to provide a position feedback to the
 *  EnahncedPositionService
 */
#ifndef ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Position_Feedback_STUB_DEFAULT_H_
#define ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Position_Feedback_STUB_DEFAULT_H_


#include <org/genivi/EnhancedPositionService/PositionFeedbackStub.h>
#include <sstream>

namespace org {
namespace genivi {
namespace EnhancedPositionService {

/**
 * Provides a default implementation for PositionFeedbackStubRemoteEvent and
 * PositionFeedbackStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class PositionFeedbackStubDefault : public virtual PositionFeedbackStub {
public:
    PositionFeedbackStubDefault();

    PositionFeedbackStubRemoteEvent* initStubAdapter(const std::shared_ptr<PositionFeedbackStubAdapter>& stubAdapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId);


    /**
     * GetVersion = This method returns the API version implemented by the server
     *  application
     */
    virtual void GetVersion(const std::shared_ptr<CommonAPI::ClientId> clientId, EnhancedPositionServiceTypes::Version& version);
    virtual void GetVersion(EnhancedPositionServiceTypes::Version& version);

    /**
     * SetPositionFeedback = This method allows a client application to provide the
     *  EnhancedPositionService with a position feedback
     */
    virtual void SetPositionFeedback(const std::shared_ptr<CommonAPI::ClientId> clientId, PositionFeedback::PositionFeedbackInfo feedback, uint64_t timestamp, EnhancedPositionServiceTypes::PositionFeedbackType feedbackType);
    virtual void SetPositionFeedback(PositionFeedback::PositionFeedbackInfo feedback, uint64_t timestamp, EnhancedPositionServiceTypes::PositionFeedbackType feedbackType);




protected:
    class RemoteEventHandler: public virtual PositionFeedbackStubRemoteEvent {
     public:
        RemoteEventHandler(PositionFeedbackStubDefault* defaultStub);


     private:
        PositionFeedbackStubDefault* defaultStub_;
    };
private:
    PositionFeedbackStubDefault::RemoteEventHandler remoteEventHandler_;


    CommonAPI::Version interfaceVersion_;
};

} // namespace EnhancedPositionService
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Position_Feedback_STUB_DEFAULT_H_
