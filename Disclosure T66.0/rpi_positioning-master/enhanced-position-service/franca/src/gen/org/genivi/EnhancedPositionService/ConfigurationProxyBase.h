/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * Configuration = This interface allows a client application to set and retrieve
 *  configuration options
 */
#ifndef ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Configuration_PROXY_BASE_H_
#define ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Configuration_PROXY_BASE_H_

#include "Configuration.h"


#include <org/genivi/EnhancedPositionService/EnhancedPositionServiceTypes.h>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.h>
#include <CommonAPI/OutputStream.h>
#include <CommonAPI/SerializableStruct.h>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Attribute.h>
#include <CommonAPI/Proxy.h>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace EnhancedPositionService {

class ConfigurationProxyBase: virtual public CommonAPI::Proxy {
 public:
    typedef CommonAPI::ObservableAttribute<EnhancedPositionServiceTypes::SatelliteSystem> SatSystemAttribute;
    typedef CommonAPI::ObservableAttribute<int32_t> UpdateIntervalAttribute;

    typedef std::function<void(const CommonAPI::CallStatus&, const EnhancedPositionServiceTypes::Version&)> GetVersionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<EnhancedPositionServiceTypes::SatelliteSystem>&)> GetSupportedSatelliteSystemsAsyncCallback;

    /**
     * SatSystem = satellite system (GPS, GLONASS, ...)
     */
    virtual SatSystemAttribute& getSatSystemAttribute() = 0;
    /**
     * UpdateInterval = update interval
     */
    virtual UpdateIntervalAttribute& getUpdateIntervalAttribute() = 0;


    /**
     * GetVersion = This method returns the API version implemented by the server
     *  application
     */
    virtual void GetVersion(CommonAPI::CallStatus& callStatus, EnhancedPositionServiceTypes::Version& version) = 0;
    virtual std::future<CommonAPI::CallStatus> GetVersionAsync(GetVersionAsyncCallback callback) = 0;
    /**
     * GetSupportedSatelliteSystems = This method returns a list of supported
     *  satellite systems
     */
    virtual void GetSupportedSatelliteSystems(CommonAPI::CallStatus& callStatus, std::vector<EnhancedPositionServiceTypes::SatelliteSystem>& satelliteSystems) = 0;
    virtual std::future<CommonAPI::CallStatus> GetSupportedSatelliteSystemsAsync(GetSupportedSatelliteSystemsAsyncCallback callback) = 0;
};

} // namespace EnhancedPositionService
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Configuration_PROXY_BASE_H_
