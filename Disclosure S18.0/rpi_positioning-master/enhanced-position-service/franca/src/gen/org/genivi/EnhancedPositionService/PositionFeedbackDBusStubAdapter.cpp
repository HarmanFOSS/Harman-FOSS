/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include "PositionFeedbackDBusStubAdapter.h"
#include <org/genivi/EnhancedPositionService/PositionFeedback.h>

namespace org {
namespace genivi {
namespace EnhancedPositionService {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createPositionFeedbackDBusStubAdapter(
                   const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                   const std::string& commonApiAddress,
                   const std::string& interfaceName,
                   const std::string& busName,
                   const std::string& objectPath,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection,
                   const std::shared_ptr<CommonAPI::StubBase>& stubBase) {
    return std::make_shared<PositionFeedbackDBusStubAdapter>(factory, commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection, stubBase);
}

INITIALIZER(registerPositionFeedbackDBusStubAdapter) {
    CommonAPI::DBus::DBusFactory::registerAdapterFactoryMethod(PositionFeedback::getInterfaceId(),
                                                               &createPositionFeedbackDBusStubAdapter);
}



PositionFeedbackDBusStubAdapterInternal::~PositionFeedbackDBusStubAdapterInternal() {
    deactivateManagedInstances();
    PositionFeedbackDBusStubAdapterHelper::deinit();
}

void PositionFeedbackDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* PositionFeedbackDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        /**
         * GetVersion = This method returns the API version implemented by the server
         *  application
         */
        "<method name=\"GetVersion\">\n"
            "<arg name=\"version\" type=\"(qqqs)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * SetPositionFeedback = This method allows a client application to provide the
         *  EnhancedPositionService with a position feedback
         */
        "<method name=\"SetPositionFeedback\">\n"
            "<arg name=\"feedback\" type=\"a{i(yv)}\" direction=\"in\" />\n"
            "<arg name=\"timestamp\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"feedbackType\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        PositionFeedbackStub,
        CommonAPI::Version
        > PositionFeedbackDBusStubAdapterInternal::getPositionFeedbackInterfaceVersionStubDispatcher(&PositionFeedbackStub::getInterfaceVersion, "uu");



/**
 * GetVersion = This method returns the API version implemented by the server
 *  application
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    PositionFeedbackStub,
    std::tuple<>,
    std::tuple<EnhancedPositionServiceTypes::Version>
    > PositionFeedbackDBusStubAdapterInternal::getVersionStubDispatcher(&PositionFeedbackStub::GetVersion, "(qqqs)");
/**
 * SetPositionFeedback = This method allows a client application to provide the
 *  EnhancedPositionService with a position feedback
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    PositionFeedbackStub,
    std::tuple<PositionFeedback::PositionFeedbackInfo, uint64_t, EnhancedPositionServiceTypes::PositionFeedbackType>,
    std::tuple<>
    > PositionFeedbackDBusStubAdapterInternal::setPositionFeedbackStubDispatcher(&PositionFeedbackStub::SetPositionFeedback, "");





const PositionFeedbackDBusStubAdapterHelper::StubDispatcherTable& PositionFeedbackDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& PositionFeedbackDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

PositionFeedbackDBusStubAdapterInternal::PositionFeedbackDBusStubAdapterInternal(
        const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
        const std::string& commonApiAddress,
        const std::string& dbusInterfaceName,
        const std::string& dbusBusName,
        const std::string& dbusObjectPath,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
        const std::shared_ptr<CommonAPI::StubBase>& stub):
        CommonAPI::DBus::DBusStubAdapter(
                factory,
                commonApiAddress,
                dbusInterfaceName,
                dbusBusName,
                dbusObjectPath,
                dbusConnection,
                false),
        PositionFeedbackDBusStubAdapterHelper(
            factory,
            commonApiAddress,
            dbusInterfaceName,
            dbusBusName,
            dbusObjectPath,
            dbusConnection,
            std::dynamic_pointer_cast<PositionFeedbackStub>(stub),
            false),
        stubDispatcherTable_({
            /**
             * GetVersion = This method returns the API version implemented by the server
             *  application
             */
            { { "GetVersion", "" }, &org::genivi::EnhancedPositionService::PositionFeedbackDBusStubAdapterInternal::getVersionStubDispatcher },
            /**
             * SetPositionFeedback = This method allows a client application to provide the
             *  EnhancedPositionService with a position feedback
             */
            { { "SetPositionFeedback", "a{i(yv)}ti" }, &org::genivi::EnhancedPositionService::PositionFeedbackDBusStubAdapterInternal::setPositionFeedbackStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &org::genivi::EnhancedPositionService::PositionFeedbackDBusStubAdapterInternal::getPositionFeedbackInterfaceVersionStubDispatcher });
}

const bool PositionFeedbackDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace EnhancedPositionService
} // namespace genivi
} // namespace org
