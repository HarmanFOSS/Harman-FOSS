/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include "EnhancedPositionDBusStubAdapter.h"
#include <org/genivi/EnhancedPositionService/EnhancedPosition.h>

namespace org {
namespace genivi {
namespace EnhancedPositionService {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createEnhancedPositionDBusStubAdapter(
                   const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                   const std::string& commonApiAddress,
                   const std::string& interfaceName,
                   const std::string& busName,
                   const std::string& objectPath,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection,
                   const std::shared_ptr<CommonAPI::StubBase>& stubBase) {
    return std::make_shared<EnhancedPositionDBusStubAdapter>(factory, commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection, stubBase);
}

INITIALIZER(registerEnhancedPositionDBusStubAdapter) {
    CommonAPI::DBus::DBusFactory::registerAdapterFactoryMethod(EnhancedPosition::getInterfaceId(),
                                                               &createEnhancedPositionDBusStubAdapter);
}



EnhancedPositionDBusStubAdapterInternal::~EnhancedPositionDBusStubAdapterInternal() {
    deactivateManagedInstances();
    EnhancedPositionDBusStubAdapterHelper::deinit();
}

void EnhancedPositionDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* EnhancedPositionDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        /**
         * PositionUpdate = This signal is called to notify a client application of a
         *  position change. The update frequency is implementation specific. The maximal
         *  allowed frequency is 10Hz
         */
        "<signal name=\"PositionUpdate\">\n"
            "<arg name=\"changedValues\" type=\"t\" />\n"
        "</signal>\n"
        /**
         * GetVersion = This method returns the API version implemented by the server
         *  application
         */
        "<method name=\"GetVersion\">\n"
            "<arg name=\"version\" type=\"(qqqs)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * GetPositionInfo = This method returns a given set of positioning data (e.g.
         *  Position, Course, Accuracy, Status, ... )
                   Note: If a requested
         *  value is invalid, it's not returned to the client application
         */
        "<method name=\"GetPositionInfo\">\n"
            "<arg name=\"valuesToReturn\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"timestamp\" type=\"t\" direction=\"out\" />\n"
            "<arg name=\"data\" type=\"a{i(yv)}\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * GetSatelliteInfo = This method returns information about the current satellite
         *  constellation
                Note: If a requested value is invalid, it's not
         *  returned to the client application
         */
        "<method name=\"GetSatelliteInfo\">\n"
            "<arg name=\"timestamp\" type=\"t\" direction=\"out\" />\n"
            "<arg name=\"satelliteInfo\" type=\"(iuuuub)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * GetTime = This method returns UTC time and date.
                    Note: If a
         *  requested value is invalid, it's not returned to the client application
         */
        "<method name=\"GetTime\">\n"
            "<arg name=\"timestamp\" type=\"t\" direction=\"out\" />\n"
            "<arg name=\"time\" type=\"a{i(yv)}\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        EnhancedPositionStub,
        CommonAPI::Version
        > EnhancedPositionDBusStubAdapterInternal::getEnhancedPositionInterfaceVersionStubDispatcher(&EnhancedPositionStub::getInterfaceVersion, "uu");



/**
 * GetVersion = This method returns the API version implemented by the server
 *  application
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    EnhancedPositionStub,
    std::tuple<>,
    std::tuple<EnhancedPositionServiceTypes::Version>
    > EnhancedPositionDBusStubAdapterInternal::getVersionStubDispatcher(&EnhancedPositionStub::GetVersion, "(qqqs)");
/**
 * GetPositionInfo = This method returns a given set of positioning data (e.g.
 *  Position, Course, Accuracy, Status, ... )
           Note: If a requested
 *  value is invalid, it's not returned to the client application
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    EnhancedPositionStub,
    std::tuple<EnhancedPositionServiceTypes::Bitmask>,
    std::tuple<EnhancedPositionServiceTypes::Timestamp, EnhancedPositionServiceTypes::PositionInfo>
    > EnhancedPositionDBusStubAdapterInternal::getPositionInfoStubDispatcher(&EnhancedPositionStub::GetPositionInfo, "ta{i(yv)}");
/**
 * GetSatelliteInfo = This method returns information about the current satellite
 *  constellation
        Note: If a requested value is invalid, it's not
 *  returned to the client application
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    EnhancedPositionStub,
    std::tuple<>,
    std::tuple<EnhancedPositionServiceTypes::Timestamp, EnhancedPositionServiceTypes::SatelliteInfo>
    > EnhancedPositionDBusStubAdapterInternal::getSatelliteInfoStubDispatcher(&EnhancedPositionStub::GetSatelliteInfo, "t(iuuuub)");
/**
 * GetTime = This method returns UTC time and date.
            Note: If a
 *  requested value is invalid, it's not returned to the client application
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    EnhancedPositionStub,
    std::tuple<>,
    std::tuple<EnhancedPositionServiceTypes::Timestamp, EnhancedPositionServiceTypes::TimeInfo>
    > EnhancedPositionDBusStubAdapterInternal::getTimeStubDispatcher(&EnhancedPositionStub::GetTime, "ta{i(yv)}");



/**
 * PositionUpdate = This signal is called to notify a client application of a
 *  position change. The update frequency is implementation specific. The maximal
 *  allowed frequency is 10Hz
 */
void EnhancedPositionDBusStubAdapterInternal::firePositionUpdateEvent(const EnhancedPositionServiceTypes::Bitmask& changedValues) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<EnhancedPositionServiceTypes::Bitmask>>
            ::sendSignal(
                *this,
                "PositionUpdate",
                "t",
                changedValues
        );
}


const EnhancedPositionDBusStubAdapterHelper::StubDispatcherTable& EnhancedPositionDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& EnhancedPositionDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

EnhancedPositionDBusStubAdapterInternal::EnhancedPositionDBusStubAdapterInternal(
        const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
        const std::string& commonApiAddress,
        const std::string& dbusInterfaceName,
        const std::string& dbusBusName,
        const std::string& dbusObjectPath,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
        const std::shared_ptr<CommonAPI::StubBase>& stub):
        CommonAPI::DBus::DBusStubAdapter(
                factory,
                commonApiAddress,
                dbusInterfaceName,
                dbusBusName,
                dbusObjectPath,
                dbusConnection,
                false),
        EnhancedPositionDBusStubAdapterHelper(
            factory,
            commonApiAddress,
            dbusInterfaceName,
            dbusBusName,
            dbusObjectPath,
            dbusConnection,
            std::dynamic_pointer_cast<EnhancedPositionStub>(stub),
            false),
        stubDispatcherTable_({
            /**
             * GetVersion = This method returns the API version implemented by the server
             *  application
             */
            { { "GetVersion", "" }, &org::genivi::EnhancedPositionService::EnhancedPositionDBusStubAdapterInternal::getVersionStubDispatcher },
            /**
             * GetPositionInfo = This method returns a given set of positioning data (e.g.
             *  Position, Course, Accuracy, Status, ... )
                       Note: If a requested
             *  value is invalid, it's not returned to the client application
             */
            { { "GetPositionInfo", "t" }, &org::genivi::EnhancedPositionService::EnhancedPositionDBusStubAdapterInternal::getPositionInfoStubDispatcher },
            /**
             * GetSatelliteInfo = This method returns information about the current satellite
             *  constellation
                    Note: If a requested value is invalid, it's not
             *  returned to the client application
             */
            { { "GetSatelliteInfo", "" }, &org::genivi::EnhancedPositionService::EnhancedPositionDBusStubAdapterInternal::getSatelliteInfoStubDispatcher },
            /**
             * GetTime = This method returns UTC time and date.
                        Note: If a
             *  requested value is invalid, it's not returned to the client application
             */
            { { "GetTime", "" }, &org::genivi::EnhancedPositionService::EnhancedPositionDBusStubAdapterInternal::getTimeStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &org::genivi::EnhancedPositionService::EnhancedPositionDBusStubAdapterInternal::getEnhancedPositionInterfaceVersionStubDispatcher });
}

const bool EnhancedPositionDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace EnhancedPositionService
} // namespace genivi
} // namespace org
