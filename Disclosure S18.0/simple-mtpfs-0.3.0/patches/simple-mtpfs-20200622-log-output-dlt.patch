*******************************************************************************
Date         : 2020-06-22
Author       : Shanyi He
Harman International Industries, Incorporated

Description  : This patch is used for improving log output to dlt.rely on patch libmtp-1.1.14-20200622-log-ouput-dlt.patch
ChangeList   : 5556436
*******************************************************************************

diff --git a/src/simple-mtpfs-fuse.cpp b/src/simple-mtpfs-fuse.cpp
index 2edeae3..87980fc 100755
--- a/src/simple-mtpfs-fuse.cpp
+++ b/src/simple-mtpfs-fuse.cpp
@@ -179,6 +179,7 @@ int wrap_fsyncdir(const char *path, int datasync, struct fuse_file_info *file_in
 
 void *wrap_init(struct fuse_conn_info *conn)
 {
+   LIBMTP_DLT_reset();
    return SMTPFileSystem::instance()->init(conn);
 }
 
@@ -409,7 +410,7 @@ void SMTPFileSystem::printVersion() const
    memset(&tmp_operations, 0, sizeof(tmp_operations));
    fuse_opt_add_arg(&args, m_args.argv[0]);
    fuse_opt_add_arg(&args, "--version");
-   std::cout << "simple-mtpfs version " << VERSION << "\n";
+   LogInfo("simple-mtpfs version %s",VERSION);
    fuse_main(args.argc, args.argv, &tmp_operations, nullptr);
    fuse_opt_free_args(&args);
 }
diff --git a/src/simple-mtpfs-log.cpp b/src/simple-mtpfs-log.cpp
index 3ac6589..a1027c6 100755
--- a/src/simple-mtpfs-log.cpp
+++ b/src/simple-mtpfs-log.cpp
@@ -23,16 +23,16 @@
 
 bool Logger::m_isInited = false;
 Logger::SMTP_LOG_LEVEL Logger::m_logLevel = SMTP_LOG_LEVEL_INFO;
-string Logger::m_logPath = "/tmp/smtp.log";
-int Logger::m_stdout = -1;
+//string Logger::m_logPath = "/tmp/smtp.log";
+//int Logger::m_stdout = -1;
 
 void Logger::init()
 {
     if (m_isInited) {
         return;
     }
-    m_stdout = dup(fileno(stdout));
-    freopen(m_logPath.c_str(), "w", stdout);
+    //m_stdout = dup(fileno(stdout));
+    //freopen(m_logPath.c_str(), "w", stdout);
 
     /* before smtp running, we can set log level by set the environment variable  SMTP_LOG_LEVEL */
     const char *logLevelEnv = getenv("SMTP_LOG_LEVEL");
@@ -65,10 +65,15 @@ void Logger::init()
     /* -- set libmtp log level end -- */
 
     m_isInited = true;
-
+    
     LogInfo("logger initialized, loglevel is:%s", toString(m_logLevel).c_str());
 }
 
+int Logger::getLogLevel()
+{
+    return m_logLevel;
+}
+
 void Logger::setLogLevel(const std::string &logLevel)
 {
    // FIXME. it's not a good idea to set log level for simple-mtpfs, the log level should read config while init.
@@ -101,7 +106,7 @@ void Logger::Log(const char *format, SMTP_LOG_LEVEL logLevel, const char* funcNa
 {
     if (m_logLevel > logLevel)
         return;
-
+#if 0
     std::string logTag;
     if (logLevel == SMTP_LOG_LEVEL_VERBOSE) {
         logTag = "SMTP DUMP ";
@@ -133,6 +138,7 @@ void Logger::Log(const char *format, SMTP_LOG_LEVEL logLevel, const char* funcNa
     fflush(stdout);
 
     va_end(args);
+#endif
 }
 
 bool Logger::isEnableLibmtpLog() 
@@ -164,16 +170,16 @@ std::string Logger::timestamp()
 
 void Logger::off()
 {
-    dup2(m_stdout, fileno(stdout));
-    close(m_stdout);
-    setvbuf(stdout, NULL, _IOLBF, 0);
+    //dup2(m_stdout, fileno(stdout));
+    //close(m_stdout);
+    //setvbuf(stdout, NULL, _IOLBF, 0);
 }
 
 void Logger::on()
 {
-    fflush(stdout);
-    m_stdout = dup(fileno(stdout));
-    freopen(m_logPath.c_str(), "a", stdout);
+    //fflush(stdout);
+    //m_stdout = dup(fileno(stdout));
+    //freopen(m_logPath.c_str(), "a", stdout);
 }
 
 
diff --git a/src/simple-mtpfs-log.h b/src/simple-mtpfs-log.h
index 3592b7c..18d11bd 100755
--- a/src/simple-mtpfs-log.h
+++ b/src/simple-mtpfs-log.h
@@ -25,7 +25,8 @@
 #include <string.h>
 #include <unistd.h>
 #include <sys/syscall.h>
-
+#include <dlt/dlt.h>
+#include <libmtp.h>
 class Logger;
 
 using namespace std;
@@ -34,12 +35,21 @@ using namespace std;
 
 #define gettid() syscall(__NR_gettid)
 
+#define DLT_LOG_ENABLE 1
+
+#if DLT_LOG_ENABLE
+#define  LogDump(format,...) do{if(Logger::getLogLevel() <= Logger::SMTP_LOG_LEVEL_VERBOSE) {LIBMTP_DLT_log(DLT_LOG_DEFAULT,format,##__VA_ARGS__);}} while(0)
+#define  LogDebug(format,...) do{if(Logger::getLogLevel() <= Logger::SMTP_LOG_LEVEL_DEBUG) {LIBMTP_DLT_log(DLT_LOG_DEBUG,format,##__VA_ARGS__);}} while(0)
+#define  LogInfo(format,...) do{if(Logger::getLogLevel() <= Logger::SMTP_LOG_LEVEL_INFO) {LIBMTP_DLT_log(DLT_LOG_INFO,format,##__VA_ARGS__);}} while(0)
+#define  LogWarning(format,...) do{if(Logger::getLogLevel() <= Logger::SMTP_LOG_LEVEL_WARNING) {LIBMTP_DLT_log(DLT_LOG_WARN,format,##__VA_ARGS__);}} while(0)
+#define  LogError(format,...) do{if(Logger::getLogLevel() <= Logger::SMTP_LOG_LEVEL_ERROR) {LIBMTP_DLT_log(DLT_LOG_ERROR,format,##__VA_ARGS__);}} while(0)
+#else
 #define  LogDump(format, ...) Logger::Log(format, Logger::SMTP_LOG_LEVEL_VERBOSE, __FUNCTION__, __LINE__, ##__VA_ARGS__)
 #define  LogDebug(format, ...) Logger::Log(format, Logger::SMTP_LOG_LEVEL_DEBUG, __FUNCTION__, __LINE__, ##__VA_ARGS__)
 #define  LogInfo(format, ...) Logger::Log(format, Logger::SMTP_LOG_LEVEL_INFO, __FUNCTION__, __LINE__, ##__VA_ARGS__)
 #define  LogWarning(format, ...) Logger::Log(format, Logger::SMTP_LOG_LEVEL_WARNING, __FUNCTION__, __LINE__, ##__VA_ARGS__)
 #define  LogError(format, ...) Logger::Log(format, Logger::SMTP_LOG_LEVEL_ERROR, __FUNCTION__, __LINE__, ##__VA_ARGS__)
-
+#endif
 class Logger
 {
 public:
@@ -55,6 +65,7 @@ public:
 public:
     static void init();
     static void setLogLevel(const std::string &logLevel);
+    static int getLogLevel();
     static void Log(const char *format, SMTP_LOG_LEVEL logLevel, const char* funcName, int line, ...);
     static bool isEnableLibmtpLog();
     static void off();
@@ -68,8 +79,8 @@ private:
 private: 
     static bool m_isInited;
     static SMTP_LOG_LEVEL m_logLevel;
-    static string m_logPath;
-    static int m_stdout;
+    //static string m_logPath;
+    //static int m_stdout;
 };
 
 #endif // SMTPFS_LOG_H
diff --git a/src/simple-mtpfs-main.cpp b/src/simple-mtpfs-main.cpp
index df22da9..c236a43 100755
--- a/src/simple-mtpfs-main.cpp
+++ b/src/simple-mtpfs-main.cpp
@@ -21,19 +21,19 @@
 #include "simple-mtpfs-config.h"
 #include "simple-mtpfs-fuse.h"
 #include "simple-mtpfs-util.h"
+#include "simple-mtpfs-log.h"
 
 int main(int argc, char **argv)
 {
+    LIBMTP_DLT_scope("SMFS","Simple MTP information");
     Config::instance();
     Logger::init();
 
     SMTPFileSystem *filesystem = SMTPFileSystem::instance();
-
     //  log the build time
-    std::cout << "the building version of simple-mtpfs: " << getVersion() << std::endl;
+    LogInfo("the building version of simple-mtpfs:%s",getVersion().c_str());
     if (!filesystem->parseOptions(argc, argv)) {
-        std::cout << "Wrong usage! See `" << smtpfs_basename(argv[0])
-            << " -h' for details\n";
+        LogError("Wrong usage! See  %s -h for details",smtpfs_basename(argv[0]));
         return 1;
     }
 
diff --git a/src/simple-mtpfs-util.cpp b/src/simple-mtpfs-util.cpp
index bb2dac5..5b4adee 100755
--- a/src/simple-mtpfs-util.cpp
+++ b/src/simple-mtpfs-util.cpp
@@ -44,6 +44,8 @@ extern "C" {
 #include "simple-mtpfs-log.h"
 #include "simple-mtpfs-util.h"
 
+#define BUILD_TIME() (__DATE__ " " __TIME__)
+
 const std::string devnull = "/dev/null";
 
 bool StreamHelper::s_enabled = false;
@@ -54,7 +56,7 @@ std::string getVersion()
 {
    static char ver[8];
    struct tm t;
-   const std::string buildTime = __DATE__ " " __TIME__;
+   const std::string buildTime = BUILD_TIME();
    std::stringstream ss;
 
    memset(ver, 0, sizeof(ver));
