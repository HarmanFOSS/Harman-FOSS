/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * PositionFeedback = This interface allows the application implementing the
 *  map-matching algorithm to provide a position feedback to the
 *  EnahncedPositionService
 */
#ifndef ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Position_Feedback_PROXY_H_
#define ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Position_Feedback_PROXY_H_

#include "PositionFeedbackProxyBase.h"


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace EnhancedPositionService {

template <typename ... _AttributeExtensions>
class PositionFeedbackProxy: virtual public PositionFeedback, virtual public PositionFeedbackProxyBase
, public _AttributeExtensions... {
public:
    PositionFeedbackProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~PositionFeedbackProxy();

    typedef PositionFeedback InterfaceType;




    /**
     * GetVersion = This method returns the API version implemented by the server
     *  application
     * 
     * Calls GetVersion with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetVersion(CommonAPI::CallStatus& callStatus, EnhancedPositionServiceTypes::Version& version);
    /**
     * Calls GetVersion with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetVersionAsync(GetVersionAsyncCallback callback);
    /**
     * SetPositionFeedback = This method allows a client application to provide the
     *  EnhancedPositionService with a position feedback
     * 
     * Calls SetPositionFeedback with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SetPositionFeedback(const PositionFeedback::PositionFeedbackInfo& feedback, const uint64_t& timestamp, const EnhancedPositionServiceTypes::PositionFeedbackType& feedbackType, CommonAPI::CallStatus& callStatus);
    /**
     * Calls SetPositionFeedback with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SetPositionFeedbackAsync(const PositionFeedback::PositionFeedbackInfo& feedback, const uint64_t& timestamp, const EnhancedPositionServiceTypes::PositionFeedbackType& feedbackType, SetPositionFeedbackAsyncCallback callback);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual std::string getAddress() const;

    /**
     * Returns the domain of the remote partner this proxy communicates with.
     */
    virtual const std::string& getDomain() const;

    /** 
     * Returns the service ID of the remote partner this proxy communicates with.
     */
    virtual const std::string& getServiceId() const;

    /**
     * Returns the instance ID of the remote partner this proxy communicates with.
     */
    virtual const std::string& getInstanceId() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<PositionFeedbackProxyBase> delegate_;
};

#ifdef WIN32
    typedef PositionFeedbackProxy<CommonAPI::WINDummyAttributeExtension<CommonAPI::WINDummyAttribute>> PositionFeedbackProxyDefault;
#else
    typedef PositionFeedbackProxy<> PositionFeedbackProxyDefault;
#endif


//
// PositionFeedbackProxy Implementation
//
template <typename ... _AttributeExtensions>
PositionFeedbackProxy<_AttributeExtensions...>::PositionFeedbackProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<PositionFeedbackProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<PositionFeedbackProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
PositionFeedbackProxy<_AttributeExtensions...>::~PositionFeedbackProxy() {
}

/**
 * GetVersion = This method returns the API version implemented by the server
 *  application
 */
template <typename ... _AttributeExtensions>
void PositionFeedbackProxy<_AttributeExtensions...>::GetVersion(CommonAPI::CallStatus& callStatus, EnhancedPositionServiceTypes::Version& version) {
    delegate_->GetVersion(callStatus, version);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PositionFeedbackProxy<_AttributeExtensions...>::GetVersionAsync(GetVersionAsyncCallback callback) {
    return delegate_->GetVersionAsync(callback);
}
/**
 * SetPositionFeedback = This method allows a client application to provide the
 *  EnhancedPositionService with a position feedback
 */
template <typename ... _AttributeExtensions>
void PositionFeedbackProxy<_AttributeExtensions...>::SetPositionFeedback(const PositionFeedback::PositionFeedbackInfo& feedback, const uint64_t& timestamp, const EnhancedPositionServiceTypes::PositionFeedbackType& feedbackType, CommonAPI::CallStatus& callStatus) {
    delegate_->SetPositionFeedback(feedback, timestamp, feedbackType, callStatus);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PositionFeedbackProxy<_AttributeExtensions...>::SetPositionFeedbackAsync(const PositionFeedback::PositionFeedbackInfo& feedback, const uint64_t& timestamp, const EnhancedPositionServiceTypes::PositionFeedbackType& feedbackType, SetPositionFeedbackAsyncCallback callback) {
    return delegate_->SetPositionFeedbackAsync(feedback, timestamp, feedbackType, callback);
}

template <typename ... _AttributeExtensions>
std::string PositionFeedbackProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
const std::string& PositionFeedbackProxy<_AttributeExtensions...>::getDomain() const {
    return delegate_->getDomain();
}

template <typename ... _AttributeExtensions>
const std::string& PositionFeedbackProxy<_AttributeExtensions...>::getServiceId() const {
    return delegate_->getServiceId();
}

template <typename ... _AttributeExtensions>
const std::string& PositionFeedbackProxy<_AttributeExtensions...>::getInstanceId() const {
    return delegate_->getInstanceId();
}

template <typename ... _AttributeExtensions>
bool PositionFeedbackProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool PositionFeedbackProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& PositionFeedbackProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& PositionFeedbackProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace EnhancedPositionService
} // namespace genivi
} // namespace org


#endif // ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Position_Feedback_PROXY_H_
