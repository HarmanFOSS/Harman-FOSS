/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201512091037.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_FAKE_LEGACY_SERVICE_Legacy_Interface_No_Object_Manager_DBUS_STUB_ADAPTER_HPP_
#define V1_FAKE_LEGACY_SERVICE_Legacy_Interface_No_Object_Manager_DBUS_STUB_ADAPTER_HPP_

#include <v1/fake/legacy/service/LegacyInterfaceNoObjectManagerStub.hpp>
#include <v1/fake/legacy/service/LegacyInterfaceDBusStubAdapter.hpp>
#include "v1/fake/legacy/service/LegacyInterfaceNoObjectManagerDBusDeployment.hpp"        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace fake {
namespace legacy {
namespace service {

typedef CommonAPI::DBus::DBusStubAdapterHelper<LegacyInterfaceNoObjectManagerStub> LegacyInterfaceNoObjectManagerDBusStubAdapterHelper;

class LegacyInterfaceNoObjectManagerDBusStubAdapterInternal
    : public virtual LegacyInterfaceNoObjectManagerStubAdapter,
      public LegacyInterfaceNoObjectManagerDBusStubAdapterHelper,
      public LegacyInterfaceDBusStubAdapterInternal
{
public:
    LegacyInterfaceNoObjectManagerDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~LegacyInterfaceNoObjectManagerDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return LegacyInterfaceNoObjectManager::getInterface();
    }




    const LegacyInterfaceNoObjectManagerDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    
    virtual const CommonAPI::Address &getAddress() const {
        return DBusStubAdapter::getAddress();
    }

    virtual void init(std::shared_ptr<DBusStubAdapter> instance) {
        return LegacyInterfaceNoObjectManagerDBusStubAdapterHelper::init(instance);
    }

    virtual void deinit() {
        return LegacyInterfaceNoObjectManagerDBusStubAdapterHelper::deinit();
    }

    virtual bool onInterfaceDBusMessage(const CommonAPI::DBus::DBusMessage& dbusMessage) {
        return LegacyInterfaceNoObjectManagerDBusStubAdapterHelper::onInterfaceDBusMessage(dbusMessage);
    }

    virtual bool onInterfaceDBusFreedesktopPropertiesMessage(const CommonAPI::DBus::DBusMessage& dbusMessage) {
        return LegacyInterfaceNoObjectManagerDBusStubAdapterHelper::onInterfaceDBusFreedesktopPropertiesMessage(dbusMessage);
    }

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::fake::legacy::service::LegacyInterfaceNoObjectManagerStub,
        CommonAPI::Version
        > getLegacyInterfaceNoObjectManagerInterfaceVersionStubDispatcher;


#ifdef WIN32
#endif


#ifdef WIN32

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::fake::legacy::service::LegacyInterfaceNoObjectManagerStub,
    std::tuple<int32_t>,
    std::tuple<int32_t, int32_t>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > testMethodStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::fake::legacy::service::LegacyInterfaceNoObjectManagerStub,
    std::tuple<>,
    std::tuple<std::string, int32_t>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>
    
    > otherTestMethodStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::fake::legacy::service::LegacyInterfaceNoObjectManagerStub,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>
    
    > finishStubDispatcher;
#endif


#ifdef WIN32
#endif

 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    LegacyInterfaceNoObjectManagerDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class LegacyInterfaceNoObjectManagerDBusStubAdapter
    : public LegacyInterfaceNoObjectManagerDBusStubAdapterInternal,
      public std::enable_shared_from_this<LegacyInterfaceNoObjectManagerDBusStubAdapter> {
public:
    LegacyInterfaceNoObjectManagerDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          LegacyInterfaceNoObjectManagerDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace service
} // namespace legacy
} // namespace fake
} // namespace v1

#endif // V1_FAKE_LEGACY_SERVICE_Legacy_Interface_No_Object_Manager_DBUS_STUB_ADAPTER_HPP_
