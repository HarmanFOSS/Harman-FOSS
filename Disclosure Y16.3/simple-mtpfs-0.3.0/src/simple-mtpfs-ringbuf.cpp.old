#include "simple-mtpfs-ringbuf.h"
#include <cstring>

extern RingBuffer RingBufferCreate(size_t size)
{
    size_t totalSize = sizeof(struct s_ringBuffer) + size;
    char *p = (char *)malloc(totalSize);
    RingBuffer buffer = (RingBuffer)p;
    buffer->buffer = p + sizeof(struct s_ringBuffer);
    buffer->size = size;
    RingBufferReset(buffer);
    return buffer;
}

void RingBufferFree(RingBuffer rBuf)
{
    RingBufferReset(rBuf);
    rBuf->size = 0;
    rBuf->dataSize = 0;
    rBuf->buffer = NULL;
    free(rBuf);
}

void RingBufferReset(RingBuffer rBuf)
{
    rBuf->headOffset = -1;
    rBuf->tailOffset = -1;
    rBuf->dataSize = 0;
}

size_t RingBufferGetCapacity(RingBuffer rBuf) 
{
    return rBuf->size;
}

size_t RingBufferGetSize(RingBuffer rBuf)
{
    return rBuf->size;
}

size_t RingBufferGetDataSize(RingBuffer rBuf)
{
    return rBuf->dataSize;
}

void RingBufferPush(RingBuffer rBuf,char *src, size_t length)
{
    if(length == 0)
        return; 

    size_t writableLen = length;
    char *pSrc = src;
    
    if(writableLen > rBuf->size)//in case of size overflow
    {
        size_t overFlowLen = writableLen - rBuf->size;
        writableLen = rBuf->size;
        pSrc = src + overFlowLen;
    }
    
    
    bool resetHead = false;
    //in case the circle buffer won't be full after adding the data
    if(rBuf->tailOffset+writableLen < rBuf->size)
    {
        memcpy(&rBuf->buffer[rBuf->tailOffset + 1], pSrc, writableLen);
        
        if((rBuf->tailOffset < rBuf->headOffset) && (rBuf->tailOffset+writableLen >= rBuf->headOffset) )
            resetHead = true;
        
        rBuf->tailOffset += writableLen;
    }
    else//in case the circle buffer will be overflow after adding the data
    {
        size_t remainSize = rBuf->size - rBuf->tailOffset - 1; //the remain size
        if(remainSize || (rBuf->tailOffset+1) < rBuf->size)
      		memcpy(&rBuf->buffer[rBuf->tailOffset+1], pSrc, remainSize);
        
        size_t coverSize = writableLen - remainSize; //size of data to be covered from the beginning
        memcpy(rBuf->buffer, pSrc+remainSize, coverSize);
        
        if(rBuf->tailOffset < rBuf->headOffset)
            resetHead = true;
        else
        {
            if(coverSize>rBuf->headOffset)
                resetHead = true;
        }
        
        rBuf->tailOffset = coverSize - 1;
    }
    
    if(rBuf->headOffset == (size_t)-1)
        rBuf->headOffset = 0;
    
    if(resetHead)
    {
        if(rBuf->tailOffset+1 < rBuf->size)
            rBuf->headOffset = rBuf->tailOffset + 1;
        else
            rBuf->headOffset = 0;
        
        rBuf->dataSize = rBuf->size;
    }
    else
    {
        if(rBuf->tailOffset >= rBuf->headOffset)
            rBuf->dataSize = rBuf->tailOffset - rBuf->headOffset + 1;
        else
            rBuf->dataSize = rBuf->size - (rBuf->headOffset - rBuf->tailOffset - 1);
    }
}

size_t inter_circularBuffer_read(RingBuffer rBuf, size_t length, char *dataOut, bool resetHead)
{
    if(rBuf->dataSize == 0 || length == 0)
        return 0;
    
    size_t rdLen = length;
    
    if(rBuf->dataSize < rdLen)
        rdLen = rBuf->dataSize;
    
    
    if(rBuf->headOffset <= rBuf->tailOffset)
    {
        if(dataOut)
            memcpy(dataOut, &rBuf->buffer[rBuf->headOffset], rdLen);
        
        if(resetHead)
        {
            rBuf->headOffset += rdLen;
            if(rBuf->headOffset > rBuf->tailOffset)
            {
                rBuf->headOffset = -1;
                rBuf->tailOffset = -1;
            }
        }
    }
    else
    {
        if(rBuf->headOffset+rdLen <= rBuf->size)
        {
            if(dataOut)
                memcpy(dataOut, &rBuf->buffer[rBuf->headOffset], rdLen);
            
            if(resetHead)
            {
                rBuf->headOffset += rdLen;
                if(rBuf->headOffset == rBuf->size)
                    rBuf->headOffset = 0;
            }
        }
        else
        {
            size_t frg1Len = rBuf->size - rBuf->headOffset;
            if(dataOut)
                memcpy(dataOut, &rBuf->buffer[rBuf->headOffset], frg1Len);
            
            size_t frg2len = rdLen - frg1Len;
            if(dataOut)
                memcpy(dataOut+frg1Len, rBuf->buffer, frg2len);
            
            if(resetHead)
            {
                rBuf->headOffset = frg2len;
                if(rBuf->headOffset > rBuf->tailOffset)
                {
                    rBuf->headOffset = -1;
                    rBuf->tailOffset = -1;
                }
            }
        }
    }
    
    if(resetHead)
        rBuf->dataSize -= rdLen;
    
    return rdLen;
}


size_t RingBufferPop(RingBuffer rBuf, size_t length, char *dataOut)
{
    return inter_circularBuffer_read(rBuf,length,dataOut,true);
}

size_t RingBufferRead(RingBuffer rBuf, size_t length, char *dataOut)
{
    return inter_circularBuffer_read(rBuf,length,dataOut,false);
}


//print circular buffer's content into str,
void RingBufferPrint(RingBuffer rBuf, bool hex)
{
    char *b = rBuf->buffer;
    size_t cSize = RingBufferGetSize(rBuf);
    char *str = (char *)malloc(2*cSize+1);
    
    char c;
    
    for(size_t i=0; i<cSize; i++)
    {
        if(RingBufferGetDataSize(rBuf) == 0)
        {
            c = '_';
        }
        else if (rBuf->tailOffset < rBuf->headOffset)
        {
            if(i>rBuf->tailOffset && i<rBuf->headOffset)
                c = '_';
            else
              c = b[i];
        }
        else
        {
            if(i>rBuf->tailOffset || i<rBuf->headOffset)
                c = '_';
            else
                c = b[i];
        }
        if(hex)
            sprintf(str+i*2, "%02X|",c);
        else
            sprintf(str+i*2, "%c|",c);
    }
    
    printf("RingBuffer: %s <size %zu dataSize:%zu>\n",str,RingBufferGetSize(rBuf),RingBufferGetDataSize(rBuf));
    
    free(str);
}
