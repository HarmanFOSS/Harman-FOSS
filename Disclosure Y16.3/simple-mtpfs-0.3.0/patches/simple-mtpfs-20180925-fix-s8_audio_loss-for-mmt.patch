*******************************************************************************
Date         : 2018-09-25
Author       : Jing Deng
Harman International Industries, Incorporated

Description  : This patch is for medialaunch connect MTP bugs.
ChangeList   : 5270539
*******************************************************************************
diff --git a/src/simple-mtpfs-mtp-device.cpp b/src/simple-mtpfs-mtp-device.cpp
index c50ec1b..1d2806a 100755
--- a/src/simple-mtpfs-mtp-device.cpp
+++ b/src/simple-mtpfs-mtp-device.cpp
@@ -339,6 +339,8 @@ const TypeDir *MTPDevice::dirFetchContentFromCache(std::string path)
 void* dirFetchCountThreadRUn(void *arg)
 {
    TypeDir *dir = (TypeDir *)arg;
+
+   //logmsg("enter  dirFetchCountThreadRUn \n");
    
    if(dir == NULL)
    {
@@ -370,12 +372,16 @@ void* dirFetchCountThreadRUn(void *arg)
       //3 the count is 0, but the real count is not 0.
       if(!i)
       {
-         //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", LIBMTP_Get_Files_And_Folders_Count: ", dir->name(), "\n");
+        // logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", LIBMTP_Get_Files_And_Folders_Count: ", dir->name(), "\n");
          
          dir->setFetchHandleDone(false);
-         int retryCnt = 10;
+         int retryCnt = 3;
 
          int32_t ret = 0;
+
+         struct timeval startTime, endTime;
+         unsigned long diffTime;
+
          do 
          {
             //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", 1111.\n");
@@ -383,13 +389,26 @@ void* dirFetchCountThreadRUn(void *arg)
             if(!g_device) break;
             if(!gMTPDev) break;
 
-            //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", 2222.\n");
+            //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", get lock start.\n");
             gMTPDev->criticalEnter1();
+            gettimeofday(&startTime, NULL);
+            //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", call LIBMTP_Get_Files_And_Folders_Count start.\n");
             ret = LIBMTP_Get_Files_And_Folders_Count(g_device,
                      dir->storageid(),
                      dir->id(),
                      handles);
+
+            //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", call LIBMTP_Get_Files_And_Folders_Count ok.\n");
+            gettimeofday(&endTime, NULL);
             gMTPDev->criticalLeave1();
+            //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", get lock end.\n");
+
+             diffTime = (endTime.tv_sec - startTime.tv_sec);
+             if(diffTime >= 2)
+             {
+                logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", diffTIme: ", diffTime, ".\n");
+                logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", LIBMTP_Get_Files_And_Folders_Count: ", dir->name(), "\n");
+             }
 
             //criticalLeave1();
             //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", 3333.\n");
@@ -399,7 +418,7 @@ void* dirFetchCountThreadRUn(void *arg)
             if(ret < 0)
             {
                logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", dir: ", dir->name(), ", LIBMTP_Get_Files_And_Folders_Count failed,go retry.\n");
-               usleep(50000);
+               usleep(100000);
             }
             else
             {
@@ -411,9 +430,21 @@ void* dirFetchCountThreadRUn(void *arg)
          {
             dir->setFetchHandleDone(true);
             dir->setItemCount(handles->n);
-            //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", count: ",handles->n, "\n");
+
+            if(handles->n >= 100)
+			{
+				logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", dir: ", dir->name(), ", count: ",handles->n, ", ok\n");
+			}
             //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", done ok.\n");
          }
+         //add here for debug
+         else
+         {
+		    //if the dir timeout three times, discard it.
+            dir->setFetchHandleDone(true);
+            dir->setItemCount(0);
+            logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", failed, retry also failed\n");
+         }
       }
 
    }while(0);
@@ -461,7 +492,7 @@ int MTPDevice::dirFetchCount(std::string path)
 
    pthread_attr_destroy(&attr);
 
-   //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", exit\n");
+  // logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", exit\n");
    return 0;
 }
 
@@ -611,11 +642,27 @@ const TypeDir *MTPDevice::dirFetchContent(std::string path, int *itemType)
 		tmpn = handles->n;
 	}
 
+   struct timeval startTime, endTime;
+   unsigned long diffTime;
+
 	for( ; i < tmpn; i++)
    {
+       gettimeofday(&startTime, NULL);
+       //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", get lock before\n");
        criticalEnter1();
+       //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", call LIBMTP_Get_Files_And_Folders_ByHandle start \n");
        LIBMTP_file_t *f = LIBMTP_Get_Files_And_Folders_ByHandle(m_device, handles->Handler[i]);
+      // logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", call LIBMTP_Get_Files_And_Folders_ByHandle ok \n");
        criticalLeave1();
+       //logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", get lock ok\n");
+       gettimeofday(&endTime, NULL);
+       diffTime = (endTime.tv_sec - startTime.tv_sec);
+       if(diffTime >= 2)
+       {
+          logmsg("  fun: ", __FUNCTION__, ", line: ", __LINE__, ", path: ", path, "\n");
+          logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", diffTime: ", diffTime, "\n");
+       }
+
        if(f == NULL)
        {
           logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", i: ", i, ",\n");
@@ -653,7 +700,7 @@ const TypeDir *MTPDevice::dirFetchContent(std::string path, int *itemType)
                filePath = path + f->filename;
             }
 
-            //printf("writeFileID, filePath: %s\n", filePath.c_str());
+            //logmsg("writeFileID, filePath: ", filePath, "\n");
             
             writeFileID(filePath, f->item_id, mUUID);
          }
@@ -887,11 +934,24 @@ int MTPDevice::filesplitPull(const std::string &src,const std::string &dst,uint3
    }
 
    //logmsg(" read file: ", src, "\n");
+   
+	struct timeval startTime, endTime;
+	unsigned long diffTime;
 
    //logmsg(" enter LIBMTP_GetPartialObject, fileId: ", fileId, "\n");
-   //criticalEnter1();
+   gettimeofday(&startTime, NULL);
+   criticalEnter1();
    rval = LIBMTP_GetPartialObject(m_device,fileId,offset,size,&tmpbuf,&readlen);
-   //criticalLeave1();
+   criticalLeave1();
+   gettimeofday(&endTime, NULL);
+   
+    diffTime = (endTime.tv_sec - startTime.tv_sec);
+	if(diffTime >= 2)
+	{
+		logmsg("  fun: ", __FUNCTION__, "  line: ", __LINE__, ", diffTIme: ", diffTime, ".\n");
+		logmsg(" read file: ", src, ", fileid: ", fileId, "\n");
+	}
+			 
    //logmsg(" exit LIBMTP_GetPartialObject, fileId: ", fileId, "\n");
 
    //logmsg("LIBMTP_GetPartialObject ", ",rval: ", rval, ",readlen: ", readlen, "\n");
