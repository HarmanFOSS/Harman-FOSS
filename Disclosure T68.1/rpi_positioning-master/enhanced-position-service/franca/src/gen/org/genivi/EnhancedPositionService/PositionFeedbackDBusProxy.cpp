/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * PositionFeedback = This interface allows the application implementing the
 *  map-matching algorithm to provide a position feedback to the
 *  EnahncedPositionService
 */
#include "PositionFeedbackDBusProxy.h"

namespace org {
namespace genivi {
namespace EnhancedPositionService {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createPositionFeedbackDBusProxy(
                    const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection) {
    return std::make_shared<PositionFeedbackDBusProxy>(factory, commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection);
}

INITIALIZER(registerPositionFeedbackDBusProxy) {
    CommonAPI::DBus::DBusFactory::registerProxyFactoryMethod(PositionFeedback::getInterfaceId(),
       &createPositionFeedbackDBusProxy);
}

PositionFeedbackDBusProxy::PositionFeedbackDBusProxy(
                    const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyconnection):
        CommonAPI::DBus::DBusProxy(factory, commonApiAddress, interfaceName, busName, objectPath, dbusProxyconnection)
    {
    }



/**
 * GetVersion = This method returns the API version implemented by the server
 *  application
 */
void PositionFeedbackDBusProxy::GetVersion(CommonAPI::CallStatus& callStatus, EnhancedPositionServiceTypes::Version& version) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<EnhancedPositionServiceTypes::Version> >::callMethodWithReply(
        *this,
        "GetVersion",
        "",
        callStatus
        , version);
}
std::future<CommonAPI::CallStatus> PositionFeedbackDBusProxy::GetVersionAsync(GetVersionAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<EnhancedPositionServiceTypes::Version> >::callMethodAsync(
        *this,
        "GetVersion",
        "",
        std::move(callback));
}
/**
 * SetPositionFeedback = This method allows a client application to provide the
 *  EnhancedPositionService with a position feedback
 */
void PositionFeedbackDBusProxy::SetPositionFeedback(const PositionFeedback::PositionFeedbackInfo& feedback, const uint64_t& timestamp, const EnhancedPositionServiceTypes::PositionFeedbackType& feedbackType, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<PositionFeedback::PositionFeedbackInfo, uint64_t, EnhancedPositionServiceTypes::PositionFeedbackType>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "SetPositionFeedback",
        "a{i(yv)}ti",
        feedback, timestamp, feedbackType,
        callStatus
        );
}
std::future<CommonAPI::CallStatus> PositionFeedbackDBusProxy::SetPositionFeedbackAsync(const PositionFeedback::PositionFeedbackInfo& feedback, const uint64_t& timestamp, const EnhancedPositionServiceTypes::PositionFeedbackType& feedbackType, SetPositionFeedbackAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<PositionFeedback::PositionFeedbackInfo, uint64_t, EnhancedPositionServiceTypes::PositionFeedbackType>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "SetPositionFeedback",
        "a{i(yv)}ti",
        feedback, timestamp, feedbackType, 
        std::move(callback));
}



void PositionFeedbackDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 0;
    ownVersionMinor = 0;
}

} // namespace EnhancedPositionService
} // namespace genivi
} // namespace org
