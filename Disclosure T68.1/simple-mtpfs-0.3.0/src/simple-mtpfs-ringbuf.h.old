#ifndef SMTPFS_RINGBUF_H
#define SMTPFS_RINGBUF_H
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct s_ringBuffer{
    size_t size; //capacity bytes size
    size_t dataSize; //occupied data size
    size_t tailOffset; //head offset, the oldest byte position offset
    size_t headOffset; //tail offset, the lastest byte position offset
    char *buffer;
} *RingBuffer;

// Construct RingBuffer with â€˜size' in byte. You must call RingBufferFree() in balance for destruction.
extern RingBuffer RingBufferCreate(size_t size);

// Destruct RingBuffer 
extern void RingBufferFree(RingBuffer rBuf);

// Reset the RingBuffer
extern void RingBufferReset(RingBuffer rBuf);

//get the capacity of RingBuffer
extern size_t RingBufferGetCapacity(RingBuffer rBuf);

//same as RingBufferGetCapacity, Just for compatibility with older versions
extern size_t RingBufferGetSize(RingBuffer rBuf);

//get occupied data size of RingBuffer
extern size_t RingBufferGetDataSize(RingBuffer rBuf);

// Push data to the tail of a circular buffer from 'src' with 'length' size in byte.
extern void RingBufferPush(RingBuffer rBuf,char *src, size_t length);

// Pop data from a circular buffer to 'dataOut'  with wished 'length' size in byte,return the actual data size in byte popped out,which is less or equal to the input 'length parameter.
extern size_t RingBufferPop(RingBuffer rBuf, size_t length, char *dataOut);

// Read data from a circular buffer to 'dataOut'  with wished 'length' size in byte,return the actual data size in byte popped out,which is less or equal to the input 'length parameter.
extern size_t RingBufferRead(RingBuffer rBuf, size_t length, char *dataOut);

//for test purpose, print the circular buffer's data content by printf(...); the 'hex' parameters indicates that if the data should be printed in asscii string or hex data format.
extern void RingBufferPrint(RingBuffer rBuf, bool hex);

#endif
