/*
 * Generated by gdbus-codegen 2.32.1. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __BLUETOOTHMANAGERPROXY_H__
#define __BLUETOOTHMANAGERPROXY_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.Manager */

#define TYPE_ORG_BLUEZ_MANAGER (org_bluez_manager_get_type ())
#define ORG_BLUEZ_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_MANAGER, OrgBluezManager))
#define IS_ORG_BLUEZ_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_MANAGER))
#define ORG_BLUEZ_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_BLUEZ_MANAGER, OrgBluezManagerIface))

struct _OrgBluezManager;
typedef struct _OrgBluezManager OrgBluezManager;
typedef struct _OrgBluezManagerIface OrgBluezManagerIface;

struct _OrgBluezManagerIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_default_adapter) (
    OrgBluezManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_find_adapter) (
    OrgBluezManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_get_properties) (
    OrgBluezManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_list_adapters) (
    OrgBluezManager *object,
    GDBusMethodInvocation *invocation);

  void (*adapter_added) (
    OrgBluezManager *object,
    const gchar *arg_unnamed_arg0);

  void (*adapter_removed) (
    OrgBluezManager *object,
    const gchar *arg_unnamed_arg0);

  void (*default_adapter_changed) (
    OrgBluezManager *object,
    const gchar *arg_unnamed_arg0);

  void (*property_changed) (
    OrgBluezManager *object,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);

};

GType org_bluez_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_bluez_manager_interface_info (void);
guint org_bluez_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_bluez_manager_complete_get_properties (
    OrgBluezManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void org_bluez_manager_complete_default_adapter (
    OrgBluezManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg0);

void org_bluez_manager_complete_find_adapter (
    OrgBluezManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);

void org_bluez_manager_complete_list_adapters (
    OrgBluezManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *unnamed_arg0);



/* D-Bus signal emissions functions: */
void org_bluez_manager_emit_property_changed (
    OrgBluezManager *object,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);

void org_bluez_manager_emit_adapter_added (
    OrgBluezManager *object,
    const gchar *arg_unnamed_arg0);

void org_bluez_manager_emit_adapter_removed (
    OrgBluezManager *object,
    const gchar *arg_unnamed_arg0);

void org_bluez_manager_emit_default_adapter_changed (
    OrgBluezManager *object,
    const gchar *arg_unnamed_arg0);



/* D-Bus method calls: */
void org_bluez_manager_call_get_properties (
    OrgBluezManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_manager_call_get_properties_finish (
    OrgBluezManager *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_manager_call_get_properties_sync (
    OrgBluezManager *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void org_bluez_manager_call_default_adapter (
    OrgBluezManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_manager_call_default_adapter_finish (
    OrgBluezManager *proxy,
    gchar **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_manager_call_default_adapter_sync (
    OrgBluezManager *proxy,
    gchar **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void org_bluez_manager_call_find_adapter (
    OrgBluezManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_manager_call_find_adapter_finish (
    OrgBluezManager *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_manager_call_find_adapter_sync (
    OrgBluezManager *proxy,
    const gchar *arg_unnamed_arg0,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void org_bluez_manager_call_list_adapters (
    OrgBluezManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_manager_call_list_adapters_finish (
    OrgBluezManager *proxy,
    gchar ***out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_manager_call_list_adapters_sync (
    OrgBluezManager *proxy,
    gchar ***out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_BLUEZ_MANAGER_PROXY (org_bluez_manager_proxy_get_type ())
#define ORG_BLUEZ_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_MANAGER_PROXY, OrgBluezManagerProxy))
#define ORG_BLUEZ_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_MANAGER_PROXY, OrgBluezManagerProxyClass))
#define ORG_BLUEZ_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_MANAGER_PROXY, OrgBluezManagerProxyClass))
#define IS_ORG_BLUEZ_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_MANAGER_PROXY))
#define IS_ORG_BLUEZ_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_MANAGER_PROXY))

typedef struct _OrgBluezManagerProxy OrgBluezManagerProxy;
typedef struct _OrgBluezManagerProxyClass OrgBluezManagerProxyClass;
typedef struct _OrgBluezManagerProxyPrivate OrgBluezManagerProxyPrivate;

struct _OrgBluezManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgBluezManagerProxyPrivate *priv;
};

struct _OrgBluezManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_bluez_manager_proxy_get_type (void) G_GNUC_CONST;

void org_bluez_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezManager *org_bluez_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezManager *org_bluez_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_bluez_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezManager *org_bluez_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezManager *org_bluez_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_BLUEZ_MANAGER_SKELETON (org_bluez_manager_skeleton_get_type ())
#define ORG_BLUEZ_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_MANAGER_SKELETON, OrgBluezManagerSkeleton))
#define ORG_BLUEZ_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_MANAGER_SKELETON, OrgBluezManagerSkeletonClass))
#define ORG_BLUEZ_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_MANAGER_SKELETON, OrgBluezManagerSkeletonClass))
#define IS_ORG_BLUEZ_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_MANAGER_SKELETON))
#define IS_ORG_BLUEZ_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_MANAGER_SKELETON))

typedef struct _OrgBluezManagerSkeleton OrgBluezManagerSkeleton;
typedef struct _OrgBluezManagerSkeletonClass OrgBluezManagerSkeletonClass;
typedef struct _OrgBluezManagerSkeletonPrivate OrgBluezManagerSkeletonPrivate;

struct _OrgBluezManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgBluezManagerSkeletonPrivate *priv;
};

struct _OrgBluezManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_bluez_manager_skeleton_get_type (void) G_GNUC_CONST;

OrgBluezManager *org_bluez_manager_skeleton_new (void);


G_END_DECLS

#endif /* __BLUETOOTHMANAGERPROXY_H__ */
