/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include "EnhancedPositionServiceTypes.h"


namespace org {
namespace genivi {
namespace EnhancedPositionService {
namespace EnhancedPositionServiceTypes {




Version::Version(const uint16_t& majValue, const uint16_t& minValue, const uint16_t& micValue, const std::string& dateValue):
        maj(majValue),
        min(minValue),
        mic(micValue),
        date(dateValue)
{
}


bool operator==(const Version& lhs, const Version& rhs) {
    if (&lhs == &rhs)
        return true;

    return
        lhs.maj == rhs.maj &&
        lhs.min == rhs.min &&
        lhs.mic == rhs.mic &&
        lhs.date == rhs.date
    ;
}

void Version::readFromInputStream(CommonAPI::InputStream& inputStream) {
    inputStream >> maj;
    inputStream >> min;
    inputStream >> mic;
    inputStream >> date;
}

void Version::writeToOutputStream(CommonAPI::OutputStream& outputStream) const {
    outputStream << maj;
    outputStream << min;
    outputStream << mic;
    outputStream << date;
}





SatelliteInfo::SatelliteInfo(const SatelliteSystem& systemValue, const uint32_t& satellitIdValue, const uint32_t& azimuthValue, const uint32_t& elevationValue, const uint32_t& snrValue, const bool& inUseValue):
        system(systemValue),
        satellitId(satellitIdValue),
        azimuth(azimuthValue),
        elevation(elevationValue),
        snr(snrValue),
        inUse(inUseValue)
{
}


bool operator==(const SatelliteInfo& lhs, const SatelliteInfo& rhs) {
    if (&lhs == &rhs)
        return true;

    return
        lhs.system == rhs.system &&
        lhs.satellitId == rhs.satellitId &&
        lhs.azimuth == rhs.azimuth &&
        lhs.elevation == rhs.elevation &&
        lhs.snr == rhs.snr &&
        lhs.inUse == rhs.inUse
    ;
}

void SatelliteInfo::readFromInputStream(CommonAPI::InputStream& inputStream) {
    inputStream >> system;
    inputStream >> satellitId;
    inputStream >> azimuth;
    inputStream >> elevation;
    inputStream >> snr;
    inputStream >> inUse;
}

void SatelliteInfo::writeToOutputStream(CommonAPI::OutputStream& outputStream) const {
    outputStream << system;
    outputStream << satellitId;
    outputStream << azimuth;
    outputStream << elevation;
    outputStream << snr;
    outputStream << inUse;
}





} // namespace EnhancedPositionServiceTypes
} // namespace EnhancedPositionService
} // namespace genivi
} // namespace org
