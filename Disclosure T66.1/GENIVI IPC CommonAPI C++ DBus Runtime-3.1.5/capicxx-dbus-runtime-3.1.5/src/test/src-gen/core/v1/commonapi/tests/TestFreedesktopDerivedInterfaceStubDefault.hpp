/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201512091035.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COMMONAPI_TESTS_Test_Freedesktop_Derived_Interface_STUB_DEFAULT_HPP_
#define V1_COMMONAPI_TESTS_Test_Freedesktop_Derived_Interface_STUB_DEFAULT_HPP_

#include <v1/commonapi/tests/TestFreedesktopInterfaceStubDefault.hpp>

#include <v1/commonapi/tests/TestFreedesktopDerivedInterfaceStub.hpp>
#include <sstream>

namespace v1 {
namespace commonapi {
namespace tests {

/**
 * Provides a default implementation for TestFreedesktopDerivedInterfaceStubRemoteEvent and
 * TestFreedesktopDerivedInterfaceStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class TestFreedesktopDerivedInterfaceStubDefault
    : public virtual TestFreedesktopDerivedInterfaceStub,
      public virtual TestFreedesktopInterfaceStubDefault {
public:
    TestFreedesktopDerivedInterfaceStubDefault();

    TestFreedesktopDerivedInterfaceStubRemoteEvent* initStubAdapter(const std::shared_ptr<TestFreedesktopDerivedInterfaceStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);

    virtual const uint32_t& getTestAttributedFromDerivedInterfaceAttribute();
    virtual const uint32_t& getTestAttributedFromDerivedInterfaceAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setTestAttributedFromDerivedInterfaceAttribute(uint32_t _value);
    virtual void setTestAttributedFromDerivedInterfaceAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _value);




protected:
    virtual bool trySetTestAttributedFromDerivedInterfaceAttribute(uint32_t _value);
    virtual bool validateTestAttributedFromDerivedInterfaceAttributeRequestedValue(const uint32_t &_value);
    virtual void onRemoteTestAttributedFromDerivedInterfaceAttributeChanged();
    class RemoteEventHandler: public virtual TestFreedesktopDerivedInterfaceStubRemoteEvent, public virtual TestFreedesktopInterfaceStubDefault::RemoteEventHandler {
    public:
        RemoteEventHandler(TestFreedesktopDerivedInterfaceStubDefault *_defaultStub);

        virtual bool onRemoteSetTestAttributedFromDerivedInterfaceAttribute(uint32_t _value);
        virtual bool onRemoteSetTestAttributedFromDerivedInterfaceAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _value);
        virtual void onRemoteTestAttributedFromDerivedInterfaceAttributeChanged();


    private:
        TestFreedesktopDerivedInterfaceStubDefault *defaultStub_;
    };
private:
    TestFreedesktopDerivedInterfaceStubDefault::RemoteEventHandler remoteEventHandler_;

    uint32_t testAttributedFromDerivedInterfaceAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace tests
} // namespace commonapi
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COMMONAPI_TESTS_Test_Freedesktop_Derived_Interface_STUB_DEFAULT
