/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * EnhancedPosition = This interface offers functionalities to retrieve the
 *  enhanced position of the vehicle
 */
#ifndef ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Enhanced_Position_PROXY_BASE_H_
#define ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Enhanced_Position_PROXY_BASE_H_

#include "EnhancedPosition.h"


#include <org/genivi/EnhancedPositionService/EnhancedPositionServiceTypes.h>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.h>
#include <CommonAPI/OutputStream.h>
#include <CommonAPI/SerializableStruct.h>
#include <cstdint>
#include <string>
#include <unordered_map>
#include <vector>

#include <CommonAPI/Event.h>
#include <CommonAPI/Proxy.h>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace EnhancedPositionService {

class EnhancedPositionProxyBase: virtual public CommonAPI::Proxy {
 public:
    typedef CommonAPI::Event<EnhancedPositionServiceTypes::Bitmask> PositionUpdateEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const EnhancedPositionServiceTypes::Version&)> GetVersionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const EnhancedPositionServiceTypes::Timestamp&, const EnhancedPositionServiceTypes::PositionInfo&)> GetPositionInfoAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const EnhancedPositionServiceTypes::Timestamp&, const EnhancedPositionServiceTypes::SatelliteInfo&)> GetSatelliteInfoAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const EnhancedPositionServiceTypes::Timestamp&, const EnhancedPositionServiceTypes::TimeInfo&)> GetTimeAsyncCallback;


    /**
     * PositionUpdate = This signal is called to notify a client application of a
     *  position change. The update frequency is implementation specific. The maximal
     *  allowed frequency is 10Hz
     */
    virtual PositionUpdateEvent& getPositionUpdateEvent() = 0;

    /**
     * GetVersion = This method returns the API version implemented by the server
     *  application
     */
    virtual void GetVersion(CommonAPI::CallStatus& callStatus, EnhancedPositionServiceTypes::Version& version) = 0;
    virtual std::future<CommonAPI::CallStatus> GetVersionAsync(GetVersionAsyncCallback callback) = 0;
    /**
     * GetPositionInfo = This method returns a given set of positioning data (e.g.
     *  Position, Course, Accuracy, Status, ... )
               Note: If a requested
     *  value is invalid, it's not returned to the client application
     */
    virtual void GetPositionInfo(const EnhancedPositionServiceTypes::Bitmask& valuesToReturn, CommonAPI::CallStatus& callStatus, EnhancedPositionServiceTypes::Timestamp& timestamp, EnhancedPositionServiceTypes::PositionInfo& data) = 0;
    virtual std::future<CommonAPI::CallStatus> GetPositionInfoAsync(const EnhancedPositionServiceTypes::Bitmask& valuesToReturn, GetPositionInfoAsyncCallback callback) = 0;
    /**
     * GetSatelliteInfo = This method returns information about the current satellite
     *  constellation
            Note: If a requested value is invalid, it's not
     *  returned to the client application
     */
    virtual void GetSatelliteInfo(CommonAPI::CallStatus& callStatus, EnhancedPositionServiceTypes::Timestamp& timestamp, EnhancedPositionServiceTypes::SatelliteInfo& satelliteInfo) = 0;
    virtual std::future<CommonAPI::CallStatus> GetSatelliteInfoAsync(GetSatelliteInfoAsyncCallback callback) = 0;
    /**
     * GetTime = This method returns UTC time and date.
                Note: If a
     *  requested value is invalid, it's not returned to the client application
     */
    virtual void GetTime(CommonAPI::CallStatus& callStatus, EnhancedPositionServiceTypes::Timestamp& timestamp, EnhancedPositionServiceTypes::TimeInfo& time) = 0;
    virtual std::future<CommonAPI::CallStatus> GetTimeAsync(GetTimeAsyncCallback callback) = 0;
};

} // namespace EnhancedPositionService
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Enhanced_Position_PROXY_BASE_H_
