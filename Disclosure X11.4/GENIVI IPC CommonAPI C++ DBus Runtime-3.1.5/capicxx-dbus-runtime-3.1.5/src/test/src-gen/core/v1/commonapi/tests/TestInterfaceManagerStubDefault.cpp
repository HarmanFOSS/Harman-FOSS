/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201512091035.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/commonapi/tests/TestInterfaceManagerStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace commonapi {
namespace tests {

TestInterfaceManagerStubDefault::TestInterfaceManagerStubDefault():
        remoteEventHandler_(this),
        autoInstanceCounter_(0),
        interfaceVersion_(TestInterfaceManager::getInterfaceVersion()) {
}

const CommonAPI::Version& TestInterfaceManagerStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

TestInterfaceManagerStubRemoteEvent* TestInterfaceManagerStubDefault::initStubAdapter(const std::shared_ptr<TestInterfaceManagerStubAdapter> &_adapter) {
    CommonAPI::Stub<TestInterfaceManagerStubAdapter, TestInterfaceManagerStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}




bool TestInterfaceManagerStubDefault::registerManagedStubTestInterfaceAutoInstance(std::shared_ptr<::v1::commonapi::tests::TestInterfaceStub> _stub) {
    autoInstanceCounter_++;
    std::stringstream ss;
    assert((CommonAPI::Stub<TestInterfaceManagerStubAdapter, TestInterfaceManagerStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<TestInterfaceManagerStubAdapter, TestInterfaceManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter) {
        ss << stubAdapter->getAddress().getInstance() << ".i" << autoInstanceCounter_;
        std::string instance = ss.str();
        return stubAdapter->registerManagedStubTestInterface(_stub, instance);
    } else {
        return false;
    }
}
bool TestInterfaceManagerStubDefault::registerManagedStubTestInterface(std::shared_ptr<::v1::commonapi::tests::TestInterfaceStub> _stub, const std::string &_instance) {
    assert((CommonAPI::Stub<TestInterfaceManagerStubAdapter, TestInterfaceManagerStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<TestInterfaceManagerStubAdapter, TestInterfaceManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter) 
        return stubAdapter->registerManagedStubTestInterface(_stub, _instance);
    else
        return false;
}
bool TestInterfaceManagerStubDefault::deregisterManagedStubTestInterface(const std::string &_instance) {
    assert((CommonAPI::Stub<TestInterfaceManagerStubAdapter, TestInterfaceManagerStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<TestInterfaceManagerStubAdapter, TestInterfaceManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter) 
        return stubAdapter->deregisterManagedStubTestInterface(_instance);
    else
        return false;
}
std::set<std::string>& TestInterfaceManagerStubDefault::getTestInterfaceInstances() {
    assert((CommonAPI::Stub<TestInterfaceManagerStubAdapter, TestInterfaceManagerStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<TestInterfaceManagerStubAdapter, TestInterfaceManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter) {
        return stubAdapter->getTestInterfaceInstances();
    } else {
        static std::set<std::string> emptySet = std::set<std::string>();
        return emptySet;
    }
}

TestInterfaceManagerStubDefault::RemoteEventHandler::RemoteEventHandler(TestInterfaceManagerStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace tests
} // namespace commonapi
} // namespace v1
