/*
 * Generated by gdbus-codegen 2.32.1. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __BLUETOOTHADAPTERPROXY_H__
#define __BLUETOOTHADAPTERPROXY_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.Adapter */

#define TYPE_ORG_BLUEZ_ADAPTER (org_bluez_adapter_get_type ())
#define ORG_BLUEZ_ADAPTER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_ADAPTER, OrgBluezAdapter))
#define IS_ORG_BLUEZ_ADAPTER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_ADAPTER))
#define ORG_BLUEZ_ADAPTER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_BLUEZ_ADAPTER, OrgBluezAdapterIface))

struct _OrgBluezAdapter;
typedef struct _OrgBluezAdapter OrgBluezAdapter;
typedef struct _OrgBluezAdapterIface OrgBluezAdapterIface;

struct _OrgBluezAdapterIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_cancel_device_creation) (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_create_device) (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_create_paired_device) (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    const gchar *arg_unnamed_arg2);

  gboolean (*handle_find_device) (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_get_properties) (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_list_devices) (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_register_agent) (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

  gboolean (*handle_release_session) (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_remove_device) (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_request_session) (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_property) (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);

  gboolean (*handle_start_discovery) (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_stop_discovery) (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_unregister_agent) (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  void (*device_created) (
    OrgBluezAdapter *object,
    const gchar *arg_unnamed_arg0);

  void (*device_disappeared) (
    OrgBluezAdapter *object,
    const gchar *arg_unnamed_arg0);

  void (*device_found) (
    OrgBluezAdapter *object,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);

  void (*device_removed) (
    OrgBluezAdapter *object,
    const gchar *arg_unnamed_arg0);

  void (*property_changed) (
    OrgBluezAdapter *object,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);

};

GType org_bluez_adapter_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_bluez_adapter_interface_info (void);
guint org_bluez_adapter_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_bluez_adapter_complete_get_properties (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void org_bluez_adapter_complete_set_property (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation);

void org_bluez_adapter_complete_request_session (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation);

void org_bluez_adapter_complete_release_session (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation);

void org_bluez_adapter_complete_start_discovery (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation);

void org_bluez_adapter_complete_stop_discovery (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation);

void org_bluez_adapter_complete_list_devices (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *unnamed_arg0);

void org_bluez_adapter_complete_create_device (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);

void org_bluez_adapter_complete_create_paired_device (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg3);

void org_bluez_adapter_complete_cancel_device_creation (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation);

void org_bluez_adapter_complete_remove_device (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation);

void org_bluez_adapter_complete_find_device (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);

void org_bluez_adapter_complete_register_agent (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation);

void org_bluez_adapter_complete_unregister_agent (
    OrgBluezAdapter *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void org_bluez_adapter_emit_property_changed (
    OrgBluezAdapter *object,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);

void org_bluez_adapter_emit_device_created (
    OrgBluezAdapter *object,
    const gchar *arg_unnamed_arg0);

void org_bluez_adapter_emit_device_removed (
    OrgBluezAdapter *object,
    const gchar *arg_unnamed_arg0);

void org_bluez_adapter_emit_device_found (
    OrgBluezAdapter *object,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);

void org_bluez_adapter_emit_device_disappeared (
    OrgBluezAdapter *object,
    const gchar *arg_unnamed_arg0);



/* D-Bus method calls: */
void org_bluez_adapter_call_get_properties (
    OrgBluezAdapter *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_adapter_call_get_properties_finish (
    OrgBluezAdapter *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_adapter_call_get_properties_sync (
    OrgBluezAdapter *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void org_bluez_adapter_call_set_property (
    OrgBluezAdapter *proxy,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_adapter_call_set_property_finish (
    OrgBluezAdapter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_adapter_call_set_property_sync (
    OrgBluezAdapter *proxy,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void org_bluez_adapter_call_request_session (
    OrgBluezAdapter *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_adapter_call_request_session_finish (
    OrgBluezAdapter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_adapter_call_request_session_sync (
    OrgBluezAdapter *proxy,
    GCancellable *cancellable,
    GError **error);

void org_bluez_adapter_call_release_session (
    OrgBluezAdapter *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_adapter_call_release_session_finish (
    OrgBluezAdapter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_adapter_call_release_session_sync (
    OrgBluezAdapter *proxy,
    GCancellable *cancellable,
    GError **error);

void org_bluez_adapter_call_start_discovery (
    OrgBluezAdapter *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_adapter_call_start_discovery_finish (
    OrgBluezAdapter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_adapter_call_start_discovery_sync (
    OrgBluezAdapter *proxy,
    GCancellable *cancellable,
    GError **error);

void org_bluez_adapter_call_stop_discovery (
    OrgBluezAdapter *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_adapter_call_stop_discovery_finish (
    OrgBluezAdapter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_adapter_call_stop_discovery_sync (
    OrgBluezAdapter *proxy,
    GCancellable *cancellable,
    GError **error);

void org_bluez_adapter_call_list_devices (
    OrgBluezAdapter *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_adapter_call_list_devices_finish (
    OrgBluezAdapter *proxy,
    gchar ***out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_adapter_call_list_devices_sync (
    OrgBluezAdapter *proxy,
    gchar ***out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void org_bluez_adapter_call_create_device (
    OrgBluezAdapter *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_adapter_call_create_device_finish (
    OrgBluezAdapter *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_adapter_call_create_device_sync (
    OrgBluezAdapter *proxy,
    const gchar *arg_unnamed_arg0,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void org_bluez_adapter_call_create_paired_device (
    OrgBluezAdapter *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    const gchar *arg_unnamed_arg2,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_adapter_call_create_paired_device_finish (
    OrgBluezAdapter *proxy,
    gchar **out_unnamed_arg3,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_adapter_call_create_paired_device_sync (
    OrgBluezAdapter *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    const gchar *arg_unnamed_arg2,
    gchar **out_unnamed_arg3,
    GCancellable *cancellable,
    GError **error);

void org_bluez_adapter_call_cancel_device_creation (
    OrgBluezAdapter *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_adapter_call_cancel_device_creation_finish (
    OrgBluezAdapter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_adapter_call_cancel_device_creation_sync (
    OrgBluezAdapter *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void org_bluez_adapter_call_remove_device (
    OrgBluezAdapter *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_adapter_call_remove_device_finish (
    OrgBluezAdapter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_adapter_call_remove_device_sync (
    OrgBluezAdapter *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void org_bluez_adapter_call_find_device (
    OrgBluezAdapter *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_adapter_call_find_device_finish (
    OrgBluezAdapter *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_adapter_call_find_device_sync (
    OrgBluezAdapter *proxy,
    const gchar *arg_unnamed_arg0,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void org_bluez_adapter_call_register_agent (
    OrgBluezAdapter *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_adapter_call_register_agent_finish (
    OrgBluezAdapter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_adapter_call_register_agent_sync (
    OrgBluezAdapter *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void org_bluez_adapter_call_unregister_agent (
    OrgBluezAdapter *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_adapter_call_unregister_agent_finish (
    OrgBluezAdapter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_adapter_call_unregister_agent_sync (
    OrgBluezAdapter *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_BLUEZ_ADAPTER_PROXY (org_bluez_adapter_proxy_get_type ())
#define ORG_BLUEZ_ADAPTER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_ADAPTER_PROXY, OrgBluezAdapterProxy))
#define ORG_BLUEZ_ADAPTER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_ADAPTER_PROXY, OrgBluezAdapterProxyClass))
#define ORG_BLUEZ_ADAPTER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_ADAPTER_PROXY, OrgBluezAdapterProxyClass))
#define IS_ORG_BLUEZ_ADAPTER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_ADAPTER_PROXY))
#define IS_ORG_BLUEZ_ADAPTER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_ADAPTER_PROXY))

typedef struct _OrgBluezAdapterProxy OrgBluezAdapterProxy;
typedef struct _OrgBluezAdapterProxyClass OrgBluezAdapterProxyClass;
typedef struct _OrgBluezAdapterProxyPrivate OrgBluezAdapterProxyPrivate;

struct _OrgBluezAdapterProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgBluezAdapterProxyPrivate *priv;
};

struct _OrgBluezAdapterProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_bluez_adapter_proxy_get_type (void) G_GNUC_CONST;

void org_bluez_adapter_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezAdapter *org_bluez_adapter_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezAdapter *org_bluez_adapter_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_bluez_adapter_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezAdapter *org_bluez_adapter_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezAdapter *org_bluez_adapter_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_BLUEZ_ADAPTER_SKELETON (org_bluez_adapter_skeleton_get_type ())
#define ORG_BLUEZ_ADAPTER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_ADAPTER_SKELETON, OrgBluezAdapterSkeleton))
#define ORG_BLUEZ_ADAPTER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_ADAPTER_SKELETON, OrgBluezAdapterSkeletonClass))
#define ORG_BLUEZ_ADAPTER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_ADAPTER_SKELETON, OrgBluezAdapterSkeletonClass))
#define IS_ORG_BLUEZ_ADAPTER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_ADAPTER_SKELETON))
#define IS_ORG_BLUEZ_ADAPTER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_ADAPTER_SKELETON))

typedef struct _OrgBluezAdapterSkeleton OrgBluezAdapterSkeleton;
typedef struct _OrgBluezAdapterSkeletonClass OrgBluezAdapterSkeletonClass;
typedef struct _OrgBluezAdapterSkeletonPrivate OrgBluezAdapterSkeletonPrivate;

struct _OrgBluezAdapterSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgBluezAdapterSkeletonPrivate *priv;
};

struct _OrgBluezAdapterSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_bluez_adapter_skeleton_get_type (void) G_GNUC_CONST;

OrgBluezAdapter *org_bluez_adapter_skeleton_new (void);


G_END_DECLS

#endif /* __BLUETOOTHADAPTERPROXY_H__ */
