/*
 * Generated by gdbus-codegen 2.32.1. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __BLUETOOTHSERIALPROXY_H__
#define __BLUETOOTHSERIALPROXY_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.Serial */

#define TYPE_ORG_BLUEZ_SERIAL (org_bluez_serial_get_type ())
#define ORG_BLUEZ_SERIAL(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_SERIAL, OrgBluezSerial))
#define IS_ORG_BLUEZ_SERIAL(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_SERIAL))
#define ORG_BLUEZ_SERIAL_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_BLUEZ_SERIAL, OrgBluezSerialIface))

struct _OrgBluezSerial;
typedef struct _OrgBluezSerial OrgBluezSerial;
typedef struct _OrgBluezSerialIface OrgBluezSerialIface;

struct _OrgBluezSerialIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_connect) (
    OrgBluezSerial *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_connect_fd) (
    OrgBluezSerial *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_disconnect) (
    OrgBluezSerial *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

};

GType org_bluez_serial_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_bluez_serial_interface_info (void);
guint org_bluez_serial_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_bluez_serial_complete_connect (
    OrgBluezSerial *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);

void org_bluez_serial_complete_connect_fd (
    OrgBluezSerial *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg1);

void org_bluez_serial_complete_disconnect (
    OrgBluezSerial *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void org_bluez_serial_call_connect (
    OrgBluezSerial *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_serial_call_connect_finish (
    OrgBluezSerial *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_serial_call_connect_sync (
    OrgBluezSerial *proxy,
    const gchar *arg_unnamed_arg0,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void org_bluez_serial_call_connect_fd (
    OrgBluezSerial *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_serial_call_connect_fd_finish (
    OrgBluezSerial *proxy,
    GVariant **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_serial_call_connect_fd_sync (
    OrgBluezSerial *proxy,
    const gchar *arg_unnamed_arg0,
    GVariant **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void org_bluez_serial_call_disconnect (
    OrgBluezSerial *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_serial_call_disconnect_finish (
    OrgBluezSerial *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_serial_call_disconnect_sync (
    OrgBluezSerial *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_BLUEZ_SERIAL_PROXY (org_bluez_serial_proxy_get_type ())
#define ORG_BLUEZ_SERIAL_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_SERIAL_PROXY, OrgBluezSerialProxy))
#define ORG_BLUEZ_SERIAL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_SERIAL_PROXY, OrgBluezSerialProxyClass))
#define ORG_BLUEZ_SERIAL_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_SERIAL_PROXY, OrgBluezSerialProxyClass))
#define IS_ORG_BLUEZ_SERIAL_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_SERIAL_PROXY))
#define IS_ORG_BLUEZ_SERIAL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_SERIAL_PROXY))

typedef struct _OrgBluezSerialProxy OrgBluezSerialProxy;
typedef struct _OrgBluezSerialProxyClass OrgBluezSerialProxyClass;
typedef struct _OrgBluezSerialProxyPrivate OrgBluezSerialProxyPrivate;

struct _OrgBluezSerialProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgBluezSerialProxyPrivate *priv;
};

struct _OrgBluezSerialProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_bluez_serial_proxy_get_type (void) G_GNUC_CONST;

void org_bluez_serial_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezSerial *org_bluez_serial_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezSerial *org_bluez_serial_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_bluez_serial_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezSerial *org_bluez_serial_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezSerial *org_bluez_serial_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_BLUEZ_SERIAL_SKELETON (org_bluez_serial_skeleton_get_type ())
#define ORG_BLUEZ_SERIAL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_SERIAL_SKELETON, OrgBluezSerialSkeleton))
#define ORG_BLUEZ_SERIAL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_SERIAL_SKELETON, OrgBluezSerialSkeletonClass))
#define ORG_BLUEZ_SERIAL_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_SERIAL_SKELETON, OrgBluezSerialSkeletonClass))
#define IS_ORG_BLUEZ_SERIAL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_SERIAL_SKELETON))
#define IS_ORG_BLUEZ_SERIAL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_SERIAL_SKELETON))

typedef struct _OrgBluezSerialSkeleton OrgBluezSerialSkeleton;
typedef struct _OrgBluezSerialSkeletonClass OrgBluezSerialSkeletonClass;
typedef struct _OrgBluezSerialSkeletonPrivate OrgBluezSerialSkeletonPrivate;

struct _OrgBluezSerialSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgBluezSerialSkeletonPrivate *priv;
};

struct _OrgBluezSerialSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_bluez_serial_skeleton_get_type (void) G_GNUC_CONST;

OrgBluezSerial *org_bluez_serial_skeleton_new (void);


G_END_DECLS

#endif /* __BLUETOOTHSERIALPROXY_H__ */
