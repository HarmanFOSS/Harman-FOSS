<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN" "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<?xml-stylesheet type="text/xsl" href="introspect.xsl"?>

<!-- SPDX-License-Identifier: MPL-2.0
     Component Name: EnhancedPositionService
     Compliance Level: Abstract Component
     Copyright (C) 2012, BMW Car IT GmbH, Continental Automotive GmbH, PCA Peugeot CitroÃ«n, XS Embedded GmbH
     License:
     This Source Code Form is subject to the terms of the
     Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with
     this file, You can obtain one at http://mozilla.org/MPL/2.0/.
-->

<node name="/org/genivi/positioning/Configuration" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="introspect.xsd">

  <interface name="org.genivi.positioning.Configuration">
    <version>4.0.0 (11-Feb-2016)</version>
    <doc>
      <line>Configuration = This interface allows a client application to set and retrieve configuration options</line>
      <line>For each configuration option, a property is provided</line>
      <line>A key identifying a configuration option is a string containing the name of the property</line>
      <line>The possible values for each configuration property including their data type are described as part of the documentation of the property</line>
    </doc>
   
    <method name="GetVersion">
      <doc>
        <line>GetVersion = This method returns the API version implemented by the server application.</line>
      </doc>
      <arg name="version" type="(qqqs)" direction="out">
        <doc>
          <line>version = struct(major,minor,micro,date)</line>
          <line>major = when the major changes, then backward compatibility with previous releases is not granted</line>
          <line>minor = when the minor changes, then backward compatibility with previous releases is granted, but something changed in the implementation of the API (e.g. new methods may have been added)</line> 
          <line>micro = when the micro changes, then backward compatibility with previous releases is granted (bug fixes or documentation modifications)</line> 
          <line>date = release date (e.g. 21-06-2011)</line>
        </doc>
      </arg>
    </method>

    <method name="GetProperties">
      <doc>
        <line>GetProperties = This method returns the current values of all global system properties.</line>
      </doc>
      <arg name="properties" type="a{sv}" direction="out">
        <doc>
          <line>properties = array[property]</line>
          <line>property = dictionary[key,value]</line>
          <line>The possible values for each configuration property including their data type are described as part of the documentation of the property</line>
        </doc>
      </arg>
    </method>

    <method name="SetProperty">
      <doc>
        <line>SetProperty = This method changes the value of the specified property</line>
        <line>Only properties that are listed as read-write are changeable</line>
        <line>On success a PropertyChanged signal will be emitted</line>
      </doc>
      <arg name="name" type="s" direction="in">
        <doc>
          <line>name = property name</line>
        </doc>
      </arg>
      <arg name="value" type="v" direction="in">
        <doc>
          <line>value = property value</line>
        </doc>
      </arg>
      <error name="org.genivi.positioning.Configuration.Error.InvalidProperty" />
    </method>

    <signal name="PropertyChanged">
      <doc>
        <line>PropertyChanged = This signal is emitted when a property changes</line>
      </doc>
      <arg name="name" type="s">
        <doc>
          <line>name = property name</line>
        </doc>
      </arg>
      <arg name="value" type="v">
        <doc>
          <line>value = property value</line>
        </doc>
      </arg>
    </signal>

    <property name="SatelliteSystem" type="u" access="readwrite">
      <doc>
        <line>SatelliteSystem = Bitmask obtained as result of a bitwise OR operation on the keys corresponding to the satellite systems (GPS,GLONASS,GALILEO,COMPASS, ... ) to be used</line>
      </doc>
    </property>

    <property name="UpdateInterval" type="i" access="readwrite">
      <doc>
        <line>UpdateInterval = update interval in ms</line>
      </doc>
    </property>

    <method name="GetSupportedProperties">
      <doc>
        <line>GetSupportedProperties = This method returns all supported global system properties</line>
        <line>For each property, an array of all possible values is provided</line>
      </doc>
      <arg name="properties" type="a{sv}" direction="out">
        <doc>
          <line>properties = array[property]</line>
          <line>property = dictionary[key,value]</line>
          <line>key = enum(SatelliteSystem,UpdateInterval, ... )</line>
          <line>key = SatelliteSystem, value = value of type 'aq'; 'q' is an enum(GPS,GLONASS,GALILEO,COMPASS, ...)</line>
          <line>key = UpdateInterval, value = value of type 'ai'; 'i' is the update interval in ms</line>
        </doc>
      </arg>
    </method>

  </interface>

</node>
