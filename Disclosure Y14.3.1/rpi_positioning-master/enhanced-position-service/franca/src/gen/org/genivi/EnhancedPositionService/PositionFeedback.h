/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * PositionFeedback = This interface allows the application implementing the
 *  map-matching algorithm to provide a position feedback to the
 *  EnahncedPositionService
 */
#ifndef ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Position_Feedback_H_
#define ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Position_Feedback_H_


#include <org/genivi/EnhancedPositionService/EnhancedPositionServiceTypes.h>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/types.h>
#include <cstdint>
#include <unordered_map>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace EnhancedPositionService {

class PositionFeedback {
 public:
    virtual ~PositionFeedback() { }

    static inline const char* getInterfaceId();
    static inline CommonAPI::Version getInterfaceVersion();
    /**
     * PositionFeedback = array of tuples (key,value)</line>
              key =
     *  enum(LATITUDE,LONGITUDE,ALTITUDE,HEADING,SPEED,CLIMB,RELIABILTY_INDEX, ...
     *  )</line>
              key = LATITUDE, value = value of type ´d´, that expresses
     *  the latitude of the current position in format %3.6f. [-90,+90]. Example:
     *  48.053250
              key = LONGITUDE, value = value of type ´d´, that
     *  expresses the longitude of the current position in format %3.6f. [-180,+180].
     *  Example: 8.324500 
              key = ALTITUDE, value = value of type ´i´, that
     *  expresses the altitude above the sea level of the current position in meters
    
     *           key = HEADING, value = value of type ´i´, that expresses the course
     *  angle in degree. [0,360]. Example: 0 => north, 90 => east, 180 => south, 270
     *  => west
              key = SPEED, value = value of type ´d´, that expresses
     *  speed measured in m/s
              key = CLIMB, value = value of type ´i´, that
     *  expresses the inclination measured in degrees
              key =
     *  RELIABILTY_INDEX, value = value of type ´y´, that indicates the position
     *  feedabck reliabilty. It can assume values from 0 to 100
     */
    /**
     * PositionFeedback = array of tuples (key,value)</line>
              key =
     *  enum(LATITUDE,LONGITUDE,ALTITUDE,HEADING,SPEED,CLIMB,RELIABILTY_INDEX, ...
     *  )</line>
              key = LATITUDE, value = value of type ´d´, that expresses
     *  the latitude of the current position in format %3.6f. [-90,+90]. Example:
     *  48.053250
              key = LONGITUDE, value = value of type ´d´, that
     *  expresses the longitude of the current position in format %3.6f. [-180,+180].
     *  Example: 8.324500 
              key = ALTITUDE, value = value of type ´i´, that
     *  expresses the altitude above the sea level of the current position in meters
    
     *           key = HEADING, value = value of type ´i´, that expresses the course
     *  angle in degree. [0,360]. Example: 0 => north, 90 => east, 180 => south, 270
     *  => west
              key = SPEED, value = value of type ´d´, that expresses
     *  speed measured in m/s
              key = CLIMB, value = value of type ´i´, that
     *  expresses the inclination measured in degrees
              key =
     *  RELIABILTY_INDEX, value = value of type ´y´, that indicates the position
     *  feedabck reliabilty. It can assume values from 0 to 100
     */
    typedef std::unordered_map<EnhancedPositionServiceTypes::PositionFeedbackType, EnhancedPositionServiceTypes::Value, CommonAPI::EnumHasher<EnhancedPositionServiceTypes::PositionFeedbackType>> PositionFeedbackInfo;
};

const char* PositionFeedback::getInterfaceId() {
    static const char* interfaceId = "org.genivi.EnhancedPositionService.PositionFeedback";
    return interfaceId;
}

CommonAPI::Version PositionFeedback::getInterfaceVersion() {
    return CommonAPI::Version(0, 0);
}

/**
 * PositionFeedback = array of tuples (key,value)</line>
          key =
 *  enum(LATITUDE,LONGITUDE,ALTITUDE,HEADING,SPEED,CLIMB,RELIABILTY_INDEX, ...
 *  )</line>
          key = LATITUDE, value = value of type ´d´, that expresses
 *  the latitude of the current position in format %3.6f. [-90,+90]. Example:
 *  48.053250
          key = LONGITUDE, value = value of type ´d´, that
 *  expresses the longitude of the current position in format %3.6f. [-180,+180].
 *  Example: 8.324500 
          key = ALTITUDE, value = value of type ´i´, that
 *  expresses the altitude above the sea level of the current position in meters

 *           key = HEADING, value = value of type ´i´, that expresses the course
 *  angle in degree. [0,360]. Example: 0 => north, 90 => east, 180 => south, 270
 *  => west
          key = SPEED, value = value of type ´d´, that expresses
 *  speed measured in m/s
          key = CLIMB, value = value of type ´i´, that
 *  expresses the inclination measured in degrees
          key =
 *  RELIABILTY_INDEX, value = value of type ´y´, that indicates the position
 *  feedabck reliabilty. It can assume values from 0 to 100
 */

} // namespace EnhancedPositionService
} // namespace genivi
} // namespace org

namespace CommonAPI {

}


namespace std {
    //hashes for types

    //hashes for error types
}

#endif // ORG_GENIVI_ENHANCEDPOSITIONSERVICE_Position_Feedback_H_
